[
    {
        "id": "c1bec941b6653e9f",
        "type": "tab",
        "label": "NoLoadTest",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "41ef7748c4988544",
        "type": "ui-template",
        "z": "c1bec941b6653e9f",
        "group": "b8c8ee42508ae355",
        "page": "",
        "ui": "",
        "name": "NoLoadTest",
        "order": 1,
        "width": 4,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div class=\"noload-test-ui\">\n        <h1>No Load Test</h1>\n        <div>\n            <div>\n                <!-- Setting ID Dropdown -->\n                <label for=\"setting_id\">Report Settings ID:</label>\n                <select v-model=\"formData.setting_id\" id=\"setting_id\" required>\n                    <option v-for=\"id in settingOptions\" :key=\"id\" :value=\"id\">{{ id }}</option>\n                </select>\n            </div>\n            <div>\n                <!-- MODE -->\n                <label for=\"mode\">Mode:</label>\n                <select v-model=\"formData.mode\" id=\"mode\" required>\n                    <option v-for=\"(value, key) in MODE\" :key=\"value\" :value=\"value\">\n                        {{ key }}\n                    </option>\n                </select>\n\n            </div>\n\n\n            <div>\n                <label for=\"step-id\">Step ID:</label>\n                <input type=\"number\" v-model.number=\"formData.stepId\" id=\"step-id\" required min=\"0\" />\n            </div>\n            <!-- Display Setting Data -->\n            <div v-if=\"selectedSetting\">\n                <h3>Setting Details:</h3>\n                <p><strong>Report Id:</strong> {{ selectedSetting.report_id }}</p>\n                <p><strong>Standard:</strong> {{ selectedSetting.standard }}</p>\n                <p><strong>UPS Model:</strong> {{ selectedSetting.ups_model }}</p>\n                <p><strong>Client Name:</strong> {{ selectedSetting.client_name }}</p>\n                <p><strong>Brand Name:</strong> {{ selectedSetting.brand_name }}</p>\n                <p><strong>Test Engineer Name:</strong> {{ selectedSetting.test_engineer_name }}</p>\n                <p><strong>Test Approval Name:</strong> {{ selectedSetting.test_approval_name }}</p>\n                <p><strong>UPS SPEC ID:</strong> {{ selectedSetting.spec_id }}</p>\n                <p><strong>UPS VA :</strong> {{ selectedSpec?.rating_va || 'N/A' }}</p>\n                <p>Selected Spec: {{ selectedSpec }}</p>\n\n\n\n            </div>\n            <div class=\"buttons\">\n                <button type=\"button\" @click=\"startNoLoadTest\" :disabled=\"noLoadTestRunning\">Start Test</button>\n                <button type=\"button\" @click=\"stopNoLoadTest\" :disabled=\"!noLoadTestRunning\">Stop Test</button>\n                <button type=\"button\" @click=\"captureMeasurement\" :disabled=\"!noLoadTestRunning\">Capture</button>\n            </div>\n        </div>\n\n        <div v-if=\"noLoadTestRunning\" class=\"test-status\">\n            <p>Noload Test running... Waiting for capture command.</p>\n            <p>Test Duration: {{ test_duration }} seconds</p>\n        </div>\n        <div v-if=\"snap_shot && noLoadTestRunning\" class=\"snapshot-feedback\">\n            <p>Snapshot Captured! Displaying Latest Measurement...</p>\n            <h2>Measurement Snapshot</h2>\n            <ul>\n                <li v-if=\"latestMeasurement\">\n                    voltage: {{ latestMeasurement }}\n                </li>\n            </ul>\n        </div>\n        <div v-if=\"!noLoadTestRunning && measurements.length > 0\" class=\"test-result\">\n            <h2>Captured Measurements</h2>\n            <ul>\n                <li v-for=\"(measurement, index) in measurements\" :key=\"index\">\n                    Measurement {{ index + 1 }}: {{ measurement }}\n                </li>\n            </ul>\n        </div>\n    </div>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            test_duration: 0,\n            measurementIdCounter: 0,\n            subreport_id: 0,\n            first_measurement_taken: false,\n            snap_shot: false,\n            test_report: null,\n            latest_settings_id: 0,\n            test_type: 1, // For No Load Test\n            setting: [],\n            all_spec: [],\n            TestType: {\n                LIGHT_LOAD_AND_FUNCTION_TEST: 0,\n                NO_LOAD_TEST: 1,\n                FULL_LOAD_TEST: 2,\n                AC_INPUT_FAILURE: 3,\n                AC_INPUT_RETURN: 4,\n                INPUT_POWER_FACTOR: 5,\n                CHANGE_OPERATION_MODE: 6,\n                STORED_ENERGY_TIME: 7,\n                SwitchTest: 8,\n                BackupTest: 9,\n                EfficiencyTest: 10,\n                SteadyState_InputVoltage_Test: 11,\n                WaveformTest: 12,\n                EFFICIENCY_NORMAL_MODE: 14,\n                EFFICIENCY_STORAGE_MODE: 15,\n                OVERLOAD_NORMAL_MODE: 16,\n                OVERLOAD_STORAGE_MODE: 17,\n            },\n            TestResult: {\n                TEST_FAILED: \"TEST_FAILED\",\n                TEST_PENDING: \"TEST_PENDING\",\n                TEST_SUCCESSFUL: \"TEST_SUCCESSFUL\",\n                USER_OBSERVATION: \"USER_OBSERVATION\",\n            },\n            loadTypes: {\n                LINEAR: \"LINEAR\",\n                NON_LINEAR: \"NON_LINEAR\",\n            },\n            MODE: {\n                NORMAL_MODE: \"NORMAL_MODE\",\n                STORAGE_MODE: \"STORAGE_MODE\",\n                FAULT_MODE: \"FAULT_MODE\",\n                ALARM_MODE: \"ALARM_MODE\",\n            },\n            formData: {\n                setting_id: 0,\n                spec_id: 0,\n                loadType: \"LINEAR\",\n                mode: \"NORMAL_MODE\",\n                loadPercentage: 0,\n                runInterval: 0,\n                stepId: 0,\n            },\n            noLoadTestRunning: false,\n            measurements: [],\n\n\n            TestCMDS: {\n                cmd_mains_input: 1,\n                alarm_status: 0,\n                noLoadTestRunning: false,\n            },\n\n            TestData: {\n\n                inputPdata: {},\n                outputPdata: {},\n            },\n            TestSense: {\n\n                sense_mains_input: 1,\n                sense_ups_output: 0,\n\n            },\n        };\n    },\n    computed: {\n        settingOptions() {\n            return this.setting.map((setting) => setting.id || 0).sort((a, b) => a - b);\n        },\n        selectedSetting() {\n            return this.setting.find((setting) => setting.id === this.formData.setting_id) || null;\n        },\n        selectedSpec() {\n            const specId = this.selectedSetting?.spec_id;\n            return this.all_spec.find((spec) => spec.id === specId) || null;\n        },\n        latestMeasurement() {\n            return this.measurements[this.measurements.length - 1] || null;\n        },\n    },\n    methods: {\n        resetTestState() {\n            this.measurements = [];\n            this.test_duration = 0;\n            this.first_measurement_taken = false;\n            this.send({ topic: \"info\", payload: \"data has been reset\" });\n        },\n        createRunCmds(overrides = {}) {\n            return {\n                alarm_status: this.TestCMDS.alarm_status,\n                cmd_mains_input: this.TestCMDS.cmd_mains_input,\n                noLoadTestRunning: this.noLoadTestRunning,\n                noLoadTestRunning: this.TestCMDS.noLoadTestRunning,\n\n                additionalData: {\n                    setting_id: this.formData.setting_id,\n                    loadType: this.formData.loadType,\n                    stepId: this.formData.stepId,\n                    loadPercentage: this.formData.loadPercentage,\n                },\n                ...overrides,\n            };\n        },\n        generateMeasurementId(testType, mainReportId) {\n            this.measurementIdCounter += 1;\n            if (this.measurementIdCounter > 99) {\n                this.measurementIdCounter = 1;\n            }\n            const testTypePart = String(testType).padStart(2, \"0\");\n            const reportPart = String(mainReportId).slice(-5);\n            const counterPart = String(this.measurementIdCounter).padStart(2, \"0\");\n            return Number(`${testTypePart}${reportPart}${counterPart}`);\n        },\n        generateMeasurement(testType, mainReportId) {\n            const uniqueId = this.generateMeasurementId(testType, mainReportId);\n            const timestamp = new Date();\n            return {\n                m_unique_id: uniqueId,\n                time_stamp: timestamp.getTime(),\n                name: \"No Load Test Measurement\",\n                mode: this.formData.mode,\n                load_type: this.formData.loadType,\n                load_percentage: this.formData.loadPercentage,\n                step_id: this.formData.stepId,\n                run_interval_sec: this.formData.runInterval,\n                // Additional fields...\n            };\n        },\n        captureMeasurement() {\n            if (this.noLoadTestRunning) {\n                this.snap_shot = true;\n                const mainReportId = this.selectedSetting?.report_id || 10000000;\n                const measurement = this.generateMeasurement(1, mainReportId);\n                this.measurements.push(measurement);\n                console.log(\"Measurement captured:\", measurement);\n                this.send({ topic: \"info\", payload: \"Measurement captured\" });\n\n                // Automatically reset the snapshot flag after a short delay\n                setTimeout(() => {\n                    this.snap_shot = false;\n                }, 2000); // Adjust the duration for how long the snapshot appears\n            } else {\n                console.warn(\"No Load Test is not running. Cannot capture measurement.\");\n            }\n        },\n        createTestReport() {\n            const report = {\n                settings: this.selectedSetting || {},\n                spec: this.selectedSpec || {},\n                subreport_id: this.subreport_id,\n                test_name: \"NO_LOAD_TEST\",\n                test_description: \"NoLoad test in various load\",\n                measurements: this.measurements,\n                test_result: \"USER_OBSERVATION\",\n            };\n\n\n            console.log(\"Generated Test Report:\", report);\n            return report;\n        },\n        async startNoLoadTest() {\n\n            // Reset test state before starting\n            this.resetTestState();\n            const mainReportId = this.selectedSetting?.report_id || 10000000; // Ensure fallback is valid\n            this.subreport_id = this.generateMeasurementId(1, mainReportId);\n            try {\n                this.TestCMDS.alarm_status = 1;\n                this.send({\n                    topic: 'commands', payload: this.createRunCmds({\n                        alarm_status: 1,\n                    })\n                });\n                await this.delay(2000);\n                this.TestCMDS.alarm_status = 0;\n                this.send({\n                    topic: 'commands', payload: this.createRunCmds({\n                        alarm_status: 0\n                    })\n                });\n                await this.delay(2000);\n                this.send({\n                    topic: 'commands', payload: this.createRunCmds()\n                });\n\n                const maxRetries = 100;\n                let retryCount = 0;\n                while (this.TestSense.sense_ups_output !== 1) {\n                    await this.delay(100);\n                    retryCount++;\n                    if (retryCount > maxRetries) {\n                        throw new Error(\"Timeout: sense_ups_output did not change to 1\");\n                    }\n                    if (!this.noLoadTestRunning) throw new Error(\"Test stopped\");\n                }\n                this.send({\n                    topic: \"info\",\n                    payload: \"Starting No Load Test...\",\n                });\n\n\n                this.send({\n                    topic: 'reset', payload: false\n                });\n                this.noLoadTestRunning = true;\n                this.send({\n                    topic: 'commands', payload: this.createRunCmds({\n                        noLoadTestRunning: true,\n                    })\n                });\n\n\n                while (this.noLoadTestRunning) {\n                    console.log(\"No Load Test is running...\");\n                    await this.delay(1000); // Simulate running test logic\n                    this.test_duration++;\n                    if (this.snap_shot) {\n                        this.captureMeasurement();\n\n                    }\n\n                    // Add any additional logic for test progress here if needed\n                }\n            } catch (error) {\n                console.error(\"Error during No Load Test:\", error.message);\n            } finally {\n                this.stopNoLoadTest();\n            }\n        },\n\n        stopNoLoadTest() {\n            this.noLoadTestRunning = false;\n            this.send({\n                topic: \"info\",\n                payload: \"Stopping No Load Test\",\n            });\n\n            this.testReport = this.createTestReport();\n            this.send({ topic: 'report', payload: this.testReport });\n\n        },\n        async delay(ms) {\n            return new Promise((resolve) => setTimeout(resolve, ms));\n        },\n\n        updateSettingData(payload) {\n            if (payload && payload.SettingData && Array.isArray(payload.SettingData.settings)) {\n                this.setting = payload.SettingData.settings;\n                this.all_spec = payload.SettingData.spec || [];\n            } else {\n                console.warn(\"No valid settings data received in payload\", payload);\n            }\n        },\n        updateTestSense(payload) {\n            if (payload && payload.TestSense) {\n                const { TestSense } = payload;\n                this.TestSense = {\n                    sense_mains_input: TestSense.sense_mains_input ?? 1,\n                    sense_ups_output: TestSense.sense_ups_output ?? 0,\n                };\n\n                console.log(\"Updated  TestSense:\", this.TestSense);\n            } else {\n                console.warn(\"Invalid payload or missing  TestSense:\", payload);\n            }\n        },\n\n        updateTestData(payload) {\n            if (payload && payload.BackUpTestData) {\n                const { TestData } = payload;\n                this.TestData = {\n\n                    inputPdata: TestData.inputPdata || {},\n                    outputPdata: TestData.outputPdata || {},\n                };\n                console.log(\"Updated BackUpTestData:\", this.TestData);\n            } else {\n                console.warn(\"Invalid payload or missing TestData:\", payload);\n            }\n        },\n    },\n    mounted() {\n        this.$watch(\"msg\", (newMsg) => {\n            if (newMsg && newMsg.payload) {\n                this.updateSettingData(newMsg.payload);\n                this.updateTestSense(newMsg.payload);\n                this.updateTestData(newMsg.payload);\n            }\n        });\n    },\n};\n</script>\n\n<style scoped>\n.noload-test-ui {\n    max-width: 450px;\n    margin: 30px auto;\n    font-family: 'Arial', sans-serif;\n    background-color: #f9f9f9;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    font-size: 24px;\n    color: #333;\n    text-align: center;\n}\n\nlabel,\np {\n    font-size: 14px;\n    color: #555;\n}\n\ninput,\nselect,\nbutton {\n    width: 100%;\n    margin-bottom: 15px;\n    padding: 10px;\n    font-size: 14px;\n    border-radius: 5px;\n}\n\nbutton {\n    cursor: pointer;\n    background-color: #007bff;\n    color: white;\n    border: none;\n}\n\nbutton:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n}\n</style>\n\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 570,
        "y": 140,
        "wires": [
            [
                "b0f783e0648beeee"
            ]
        ]
    },
    {
        "id": "7a9a539679660c34",
        "type": "inject",
        "z": "c1bec941b6653e9f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "fda9c3824282c085"
            ]
        ]
    },
    {
        "id": "fda9c3824282c085",
        "type": "function",
        "z": "c1bec941b6653e9f",
        "name": "Fecth  Test Data",
        "func": "function checkUndefined(value) {\n    return value !== undefined;\n}\n\nlet TestData = {\n    isValid: true, // Start as valid and check for invalid cases.\n       \n    inputPdata: global.get(\"inputPdata\"),\n    outputPdata: global.get(\"outputPdata\")\n   \n};\n\nlet TestSense={\n    isValid: true,\n    sense_mains_input: global.get(\"sense_mains_input\"),\n    sense_ups_output: global.get(\"sense_ups_output\"),\n};\n\n// Validate all fields\nTestData.isValid = [\n   \n    TestData.inputPdata,\n    TestData.outputPdata,\n\n].every(checkUndefined);\n\nTestSense.isValid = [\n    TestSense.sense_mains_input,   \n    TestSense.sense_ups_output  \n\n].every(checkUndefined);\n\n\n\nlet SettingData = {\n    latest_setting_id: global.get(\"latest_setting_id\") || 0,\n    settings: global.get(\"settings\") || [],\n    spec:global.get(\"spec\")||[],\n};\n\n// Construct the message payload\nmsg.payload = {\n    TestData: TestData,\n    TestSense:TestSense,\n    SettingData: SettingData\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 140,
        "wires": [
            [
                "41ef7748c4988544"
            ]
        ]
    },
    {
        "id": "be221123e6beb8f9",
        "type": "debug",
        "z": "c1bec941b6653e9f",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 200,
        "wires": []
    },
    {
        "id": "b0f783e0648beeee",
        "type": "switch",
        "z": "c1bec941b6653e9f",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "commands",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "report",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "info",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 730,
        "y": 140,
        "wires": [
            [
                "9bdf1704b543ea95",
                "888f8cd4d08edeac"
            ],
            [
                "dc3e840e50d3f5cf",
                "2fb8ea0b84355da6"
            ],
            [
                "f6ca1a9f8d135e90"
            ],
            []
        ]
    },
    {
        "id": "9bdf1704b543ea95",
        "type": "debug",
        "z": "c1bec941b6653e9f",
        "name": "NoLoad TestRun",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 120,
        "wires": []
    },
    {
        "id": "dc3e840e50d3f5cf",
        "type": "debug",
        "z": "c1bec941b6653e9f",
        "name": "Report",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 160,
        "wires": []
    },
    {
        "id": "f6ca1a9f8d135e90",
        "type": "debug",
        "z": "c1bec941b6653e9f",
        "name": "Noloadtest info",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 200,
        "wires": []
    },
    {
        "id": "6b29f809053401c4",
        "type": "inject",
        "z": "c1bec941b6653e9f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "e0bfddfd92d13ea4",
                "fe488d6c8a171b53",
                "fd9f6a494cbb86ae",
                "f68912ac0fa86263"
            ]
        ]
    },
    {
        "id": "e0bfddfd92d13ea4",
        "type": "change",
        "z": "c1bec941b6653e9f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "inputPdata",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 360,
        "wires": [
            [
                "22255bdea1ea83c5"
            ]
        ]
    },
    {
        "id": "f68912ac0fa86263",
        "type": "function",
        "z": "c1bec941b6653e9f",
        "name": "random_input_power",
        "func": "// Function node to generate random power data and assign to msg.payload.data\nmsg.payload = {\n  \n        type: \"UPS_INPUT\", // Randomly assign type 0 (INPUT_POWER) or 1 (OUTPUT_POWER)\n        voltage: (Math.random() * 50 + 200).toFixed(2), // Random voltage between 200V and 250V\n        current: (Math.random() * 10 + 1).toFixed(2),   // Random current between 1A and 10A\n        power: (Math.random() * 1000 + 100).toFixed(2), // Random power between 100W and 1100W\n        energy: (Math.random() * 10 + 0.5).toFixed(2),  // Random energy between 0.5kWh and 10.5kWh\n        pf: (Math.random() * 0.5 + 0.5).toFixed(2),     // Random power factor between 0.5 and 1.0\n        frequency: (Math.random() * 5 + 45).toFixed(2)  // Random frequency between 45Hz and 50Hz\n    \n};\n\nglobal.set(\"inputPdata\",msg.payload);\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "22255bdea1ea83c5"
            ]
        ]
    },
    {
        "id": "fe488d6c8a171b53",
        "type": "change",
        "z": "c1bec941b6653e9f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "outputPdata",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 460,
        "wires": [
            [
                "0159c767a569c2cd"
            ]
        ]
    },
    {
        "id": "fd9f6a494cbb86ae",
        "type": "function",
        "z": "c1bec941b6653e9f",
        "name": "random_outout_power",
        "func": "// Function node to generate random power data and assign to msg.payload.data\nmsg.payload = {\n   \n        type: \"UPS_OUTPUT\", // Randomly assign type 0 (INPUT_POWER) or 1 (OUTPUT_POWER)\n        voltage: (Math.random() * 50 + 200).toFixed(2), // Random voltage between 200V and 250V\n        current: (Math.random() * 10 + 1).toFixed(2),   // Random current between 1A and 10A\n        power: (Math.random() * 1000 + 100).toFixed(2), // Random power between 100W and 1100W\n        energy: (Math.random() * 10 + 0.5).toFixed(2),  // Random energy between 0.5kWh and 10.5kWh\n        pf: (Math.random() * 0.5 + 0.5).toFixed(2),     // Random power factor between 0.5 and 1.0\n        frequency: (Math.random() * 5 + 45).toFixed(2)  // Random frequency between 45Hz and 50Hz\n   \n};\nglobal.set(\"outputPdata\",msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 500,
        "wires": [
            [
                "0159c767a569c2cd"
            ]
        ]
    },
    {
        "id": "0159c767a569c2cd",
        "type": "ui-template",
        "z": "c1bec941b6653e9f",
        "group": "d0492803a3d42e7b",
        "page": "",
        "ui": "",
        "name": "POWER_METER_OUTPUT POWER",
        "order": 2,
        "width": 5,
        "height": null,
        "head": "",
        "format": "<template>\n  <div class=\"meter-container\">\n    <!-- Dynamic Header -->\n    <div class=\"meter-header\">\n      <h2>{{ headerText }}</h2>\n    </div>\n    <!-- Multi-function Meter -->\n    <div class=\"meter-display\">\n      <div class=\"meter-row\">\n        <div class=\"meter-item\">\n          <h3>Voltage</h3>\n          <h1>{{ data.voltage }} V</h1>\n        </div>\n        <div class=\"meter-item\">\n          <h3>Current</h3>\n          <h1>{{ data.current }} A</h1>\n        </div>\n      </div>\n      <div class=\"meter-row\">\n        <div class=\"meter-item\">\n          <h3>Power</h3>\n          <h1>{{ data.power }} W</h1>\n        </div>\n        <div class=\"meter-item\">\n          <h3>Energy</h3>\n          <h1>{{ data.energy }} kWh</h1>\n        </div>\n      </div>\n      <div class=\"meter-row\">\n        <div class=\"meter-item\">\n          <h3>Power Factor</h3>\n          <h1>{{ data.pf }}</h1>\n        </div>\n        <div class=\"meter-item\">\n          <h3>Frequency</h3>\n          <h1>{{ data.frequency }} Hz</h1>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: {\n        type: 0, // Default to INPUT_POWER\n        voltage: 0,\n        current: 0,\n        power: 0,\n        energy: 0,\n        pf: 0,\n        frequency: 0,\n\n      },\n      dataType: {\n        INPUT_POWER: \"UPS_INPUT\",\n        OUTPUT_POWER: \"UPS_OUTPUT\",\n        MAINS: \"MAINS\",\n      },\n    };\n  },\n  computed: {\n    // Determine header text based on data type\n    headerText() {\n      return this.data.type === this.dataType.INPUT_POWER\n        ? \"Input Power\"\n        : \"Output Power\";\n    },\n  },\n  methods: {\n    updatePowerData(payload) {\n      if (payload) {\n        this.data = { ...this.data, ...payload }; // Merge new data with existing data\n      } else {\n        console.error(\"Invalid payload:\", payload);\n      }\n    },\n  },\n  mounted() {\n    this.$watch(\n      \"msg\",\n      (newMsg) => {\n        if (newMsg && newMsg.payload) {\n          this.updatePowerData(newMsg.payload);\n        }\n      },\n      { deep: true }\n    );\n  },\n};\n</script>\n\n<style scoped>\n/* Outer Container */\n.meter-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  background-color: #222;\n  border-radius: 10px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);\n  max-width: 600px;\n  margin: auto;\n}\n\n/* Header Styling */\n.meter-header {\n  margin-bottom: 15px;\n  text-align: center;\n}\n\n.meter-header h2 {\n  color: #fff;\n  font-family: \"Courier New\", Courier, monospace;\n  font-size: 1.5rem;\n  margin: 0;\n}\n\n/* Inner Display */\n.meter-display {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-family: \"Courier New\", Courier, monospace;\n  color: #fff;\n}\n\n/* Rows for Data */\n.meter-row {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n}\n\n/* Individual Items */\n.meter-item {\n  background-color: #333;\n  flex: 1;\n  padding: 15px;\n  border-radius: 8px;\n  text-align: center;\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.7);\n}\n\n/* Heading and Value Styling */\n.meter-item h3 {\n  margin: 0;\n  font-size: 1rem;\n  color: #aaa;\n}\n\n.meter-item h1 {\n  margin: 5px 0 0;\n  font-size: 1.5rem;\n  color: #fff;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 710,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "22255bdea1ea83c5",
        "type": "ui-template",
        "z": "c1bec941b6653e9f",
        "group": "eaf9e02b16206474",
        "page": "",
        "ui": "",
        "name": "POWER_METER_INPUTPOWER",
        "order": 1,
        "width": 4,
        "height": null,
        "head": "",
        "format": "<template>\n  <div class=\"meter-container\">\n    <!-- Dynamic Header -->\n    <div class=\"meter-header\">\n      <h2>{{ headerText }}</h2>\n    </div>\n    <!-- Multi-function Meter -->\n    <div class=\"meter-display\">\n      <div class=\"meter-row\">\n        <div class=\"meter-item\">\n          <h3>Voltage</h3>\n          <h1>{{ data.voltage }} V</h1>\n        </div>\n        <div class=\"meter-item\">\n          <h3>Current</h3>\n          <h1>{{ data.current }} A</h1>\n        </div>\n      </div>\n      <div class=\"meter-row\">\n        <div class=\"meter-item\">\n          <h3>Power</h3>\n          <h1>{{ data.power }} W</h1>\n        </div>\n        <div class=\"meter-item\">\n          <h3>Energy</h3>\n          <h1>{{ data.energy }} kWh</h1>\n        </div>\n      </div>\n      <div class=\"meter-row\">\n        <div class=\"meter-item\">\n          <h3>Power Factor</h3>\n          <h1>{{ data.pf }}</h1>\n        </div>\n        <div class=\"meter-item\">\n          <h3>Frequency</h3>\n          <h1>{{ data.frequency }} Hz</h1>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: {\n        type: 0, // Default to INPUT_POWER\n        voltage: 0,\n        current: 0,\n        power: 0,\n        energy: 0,\n        pf: 0,\n        frequency: 0,\n\n      },\n      dataType: {\n        INPUT_POWER: \"UPS_INPUT\",\n        OUTPUT_POWER: \"UPS_OUTPUT\",\n        MAINS: \"MAINS\",\n      },\n    };\n  },\n  computed: {\n    // Determine header text based on data type\n    headerText() {\n      return this.data.type === this.dataType.INPUT_POWER\n        ? \"Input Power\"\n        : \"Output Power\";\n    },\n  },\n  methods: {\n    updatePowerData(payload) {\n      if (payload) {\n        this.data = { ...this.data, ...payload }; // Merge new data with existing data\n      } else {\n        console.error(\"Invalid payload:\", payload);\n      }\n    },\n  },\n  mounted() {\n    this.$watch(\n      \"msg\",\n      (newMsg) => {\n        if (newMsg && newMsg.payload) {\n          this.updatePowerData(newMsg.payload);\n        }\n      },\n      { deep: true }\n    );\n  },\n};\n</script>\n\n<style scoped>\n/* Outer Container */\n.meter-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  background-color: #222;\n  border-radius: 10px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);\n  max-width: 600px;\n  margin: auto;\n}\n\n/* Header Styling */\n.meter-header {\n  margin-bottom: 15px;\n  text-align: center;\n}\n\n.meter-header h2 {\n  color: #fff;\n  font-family: \"Courier New\", Courier, monospace;\n  font-size: 1.5rem;\n  margin: 0;\n}\n\n/* Inner Display */\n.meter-display {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-family: \"Courier New\", Courier, monospace;\n  color: #fff;\n}\n\n/* Rows for Data */\n.meter-row {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n}\n\n/* Individual Items */\n.meter-item {\n  background-color: #333;\n  flex: 1;\n  padding: 15px;\n  border-radius: 8px;\n  text-align: center;\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.7);\n}\n\n/* Heading and Value Styling */\n.meter-item h3 {\n  margin: 0;\n  font-size: 1rem;\n  color: #aaa;\n}\n\n.meter-item h1 {\n  margin: 5px 0 0;\n  font-size: 1.5rem;\n  color: #fff;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 700,
        "y": 360,
        "wires": [
            [
                "604a9827152bc997"
            ]
        ]
    },
    {
        "id": "604a9827152bc997",
        "type": "ui-chart",
        "z": "c1bec941b6653e9f",
        "group": "eaf9e02b16206474",
        "name": "",
        "label": "VOLTAGE VARIATION",
        "order": 3,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "volatge",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 9,
        "height": 10,
        "className": "",
        "interpolation": "linear",
        "x": 1020,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "f0e4bd3da183d99c",
        "type": "ui-chart",
        "z": "c1bec941b6653e9f",
        "group": "eaf9e02b16206474",
        "name": "",
        "label": "VOLTAGE VARIATION",
        "order": 3,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "volatge",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 9,
        "height": 10,
        "className": "",
        "interpolation": "linear",
        "x": 2040,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2fb8ea0b84355da6",
        "type": "link out",
        "z": "c1bec941b6653e9f",
        "name": "NoloadTestOut",
        "mode": "link",
        "links": [
            "b89c21b9c5642159"
        ],
        "x": 1335,
        "y": 180,
        "wires": []
    },
    {
        "id": "888f8cd4d08edeac",
        "type": "function",
        "z": "c1bec941b6653e9f",
        "name": "update global",
        "func": "let alarm_status=msg.payload.alarm_status;\nlet cmd_mains_input=msg.payload.cmd_mains_input;\nlet noLoadTestRunning=msg.payload.noloadTestRunning;\n\n\nglobal.set(\"alarm_status\",alarm_status);\nglobal.set(\"cmd_mains_input\",cmd_mains_input);\nglobal.set(\"noLoadTestRunning\",noLoadTestRunning);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "b8c8ee42508ae355",
        "type": "ui-group",
        "name": "NoLoad Data",
        "page": "5941f994582931ea",
        "width": 4,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "d0492803a3d42e7b",
        "type": "ui-group",
        "name": "NoLoadOutPut",
        "page": "5941f994582931ea",
        "width": 8,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "eaf9e02b16206474",
        "type": "ui-group",
        "name": "OUTPUT_DATA",
        "page": "7d0f53039d1540b1",
        "width": 9,
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "output_data",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "5941f994582931ea",
        "type": "ui-page",
        "name": "NoLoadtest",
        "ui": "6bb6879aa70631ea",
        "path": "/noload_test",
        "icon": "home",
        "layout": "grid",
        "theme": "f51f9a07212ff54b",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "7d0f53039d1540b1",
        "type": "ui-page",
        "name": "BACKUP_TEST",
        "ui": "6bb6879aa70631ea",
        "path": "/backup_test",
        "icon": "battery-clock",
        "layout": "grid",
        "theme": "f51f9a07212ff54b",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 4,
        "className": "backup_test",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "6bb6879aa70631ea",
        "type": "ui-base",
        "name": "UPS Tester",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "showPageTitle": true,
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": "1",
        "showDisconnectNotification": true
    },
    {
        "id": "f51f9a07212ff54b",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#d1479f",
            "primary": "#0094ce",
            "bgPage": "#ededed",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    }
]