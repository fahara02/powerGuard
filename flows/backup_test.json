[
    {
        "id": "46413099658d8708",
        "type": "tab",
        "label": "BACKUP_TEST",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c56a55c172434941",
        "type": "inject",
        "z": "46413099658d8708",
        "name": "Load ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 200,
        "y": 180,
        "wires": [
            [
                "e21eabdbd2089aec"
            ]
        ]
    },
    {
        "id": "a778c08c14117d94",
        "type": "inject",
        "z": "46413099658d8708",
        "name": "Load OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 200,
        "y": 230,
        "wires": [
            [
                "e21eabdbd2089aec"
            ]
        ]
    },
    {
        "id": "e21eabdbd2089aec",
        "type": "switch",
        "z": "46413099658d8708",
        "name": "ON/OFF Switch",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 205,
        "wires": [
            [
                "f8627685fb8c49fc"
            ],
            [
                "24f979030a0c8b2f"
            ]
        ]
    },
    {
        "id": "f8627685fb8c49fc",
        "type": "function",
        "z": "46413099658d8708",
        "name": "Start Timer",
        "func": "const isRunning=true;\nflow.set('isRunning', isRunning);\n\nflow.set('startTime', new Date());\nif(isRunning){\nnode.status({ fill: 'green', shape: 'dot', text: 'Timer started...' });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "24f979030a0c8b2f",
        "type": "function",
        "z": "46413099658d8708",
        "name": "Stop Timer",
        "func": "flow.set('isRunning', false);\nflow.set('startTime', null);\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 230,
        "wires": [
            []
        ]
    },
    {
        "id": "4f85d1f669cb7fe3",
        "type": "inject",
        "z": "46413099658d8708",
        "name": "1 Second Interval",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 280,
        "wires": [
            [
                "f852a80f22bfea7d"
            ]
        ]
    },
    {
        "id": "f852a80f22bfea7d",
        "type": "function",
        "z": "46413099658d8708",
        "name": "Update Timer",
        "func": "// Read context values\nconst isRunning = flow.get('isRunning') === true;\nconst startTime = flow.get('startTime'); // Expect an ISO string or timestamp\n\nif (isRunning && startTime) {\n    // Parse startTime into a Date object\n    const start = new Date(startTime);\n    if (isNaN(start.getTime())) {\n        // Handle invalid startTime\n        node.status({ fill: 'red', shape: 'ring', text: 'Invalid start time' });\n        return null;\n    }\n\n    // Calculate elapsed time\n    const now = new Date();\n    const elapsedMs = now.getTime() - start.getTime();\n\n    // Convert elapsed time to hours, minutes, and seconds\n    const totalSeconds = Math.floor(elapsedMs / 1000);\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = totalSeconds % 60;\n\n    // Format as HH:MM:SS\n    const formattedTime = [\n        hours.toString().padStart(2, '0'),\n        minutes.toString().padStart(2, '0'),\n        seconds.toString().padStart(2, '0'),\n    ].join(':');\n\n    // Update payload and node status\n    msg.payload = formattedTime;\n    node.status({ fill: 'green', shape: 'dot', text: formattedTime });\n    return msg;\n} else if (!isRunning) {\n    // Timer is stopped\n    node.status({ fill: 'red', shape: 'ring', text: 'Timer Stopped' });\n    return null;\n} else {\n    // Handle edge case: startTime is missing\n    node.status({ fill: 'red', shape: 'ring', text: 'Missing start time' });\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 280,
        "wires": [
            [
                "7af965e537ef84fa"
            ]
        ]
    },
    {
        "id": "7af965e537ef84fa",
        "type": "debug",
        "z": "46413099658d8708",
        "name": "Elapsed Time",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 600,
        "y": 280,
        "wires": []
    },
    {
        "id": "861182f42f524856",
        "type": "function",
        "z": "46413099658d8708",
        "name": "BUFFER",
        "func": "let previousValue = flow.get('previousValue') || 0;\n\nif (msg.payload === 1 && previousValue !== 1) {\n    // First 1 received; send it\n    flow.set('previousValue', 1);\n    return msg; // Forward the message\n} else if (msg.payload === 0 && previousValue !== 0) {\n    // First 0 received; send it\n    flow.set('previousValue', 0);\n    return msg; // Forward the message\n} else {\n    // Repeated 1s or 0s, do nothing\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "e21eabdbd2089aec"
            ]
        ]
    },
    {
        "id": "518691ee2b8704be",
        "type": "function",
        "z": "46413099658d8708",
        "name": "BACKUP_TEST",
        "func": "// Helper function for delay\nfunction delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Main async function\n(async () => {\n    if (msg.payload === true) {\n        // Set a flag to indicate the backup test is running\n        global.set('backupTestRunning', true);\n        node.warn('Backup test started');\n\n        try {\n            // Step 1: Trigger start alarm\n            global.set('alarm_status', 1);\n            node.warn('Start alarm triggered');\n            await delay(2000); // 2 seconds delay\n            if (!global.get('backupTestRunning')) throw new Error('Backup test stopped');\n            global.set('alarm_status', 0);\n            node.warn('Start alarm stopped');\n\n            // Step 2: Turn off mains input\n            global.set('cmd_mains_input', 0);\n            node.warn('Turning off mains input...');\n\n            // Step 3: Wait for mains input to be confirmed as off\n            while (global.get('sense_mains_input') !== 0) {\n                if (!global.get('backupTestRunning')) throw new Error('Backup test stopped');\n                node.warn('Waiting for sense_mains_input to confirm 0...');\n                await delay(100); // Check every 100ms\n            }\n            node.warn('Mains input confirmed off');\n\n            // Step 4: Wait for UPS output to be detected as 1\n            while (global.get('sense_ups_output') !== 1) {\n                if (!global.get('backupTestRunning')) throw new Error('Backup test stopped');\n                node.warn('Waiting for sense_ups_output to confirm 1...');\n                await delay(100); // Check every 100ms\n            }\n            node.warn('UPS output detected as 1');\n\n            // Step 5: Start the backup timer\n            let backupTime = 0;\n            const interval = 1000; // 1-second interval\n\n            node.warn('Measuring backup time...');\n            while (global.get('sense_ups_output') === 1) {\n                if (!global.get('backupTestRunning')) throw new Error('Backup test stopped');\n                await delay(interval); // Wait 1 second\n                backupTime++; // Increment backup timer\n                global.set('BackupTime', backupTime);\n                node.warn(`Backup time: ${backupTime} seconds`);\n            }\n\n            // Step 6: Stop backup test and log results\n            node.warn('UPS output dropped to 0. Backup test stopped');\n            global.set('BackupTime', backupTime);\n            node.warn(`Total backup time: ${backupTime} seconds`);\n\n        } catch (error) {\n            // Handle process stop\n            node.warn(error.message);\n        } finally {\n            // Reset backupTestRunning flag\n            global.set('backupTestRunning', false);\n            node.warn('Backup test process ended');\n        }\n\n    } else if (msg.payload === false) {\n        // Stop the backup test\n        node.warn('Stopping backup test...');\n        global.set('backupTestRunning', false);\n        global.set('alarm_status', 0);\n        global.set('cmd_mains_input', 1); // Assuming 1 is the default or safe state\n        node.warn('Backup test stopped and reset');\n    }\n\n    return null;\n})();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "28a534038cc22b3c",
        "type": "inject",
        "z": "46413099658d8708",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "c909ad4f0537c120"
            ]
        ]
    },
    {
        "id": "c909ad4f0537c120",
        "type": "change",
        "z": "46413099658d8708",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "BackupTime",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "ddde2940ca2fe7fe",
        "type": "ui-template",
        "z": "46413099658d8708",
        "group": "eaf9e02b16206474",
        "page": "",
        "ui": "",
        "name": "POWER_METER_INPUTPOWER",
        "order": 1,
        "width": 3,
        "height": "",
        "head": "",
        "format": "<template>\n  <div class=\"meter-container\">\n    <!-- Dynamic Header -->\n    <div class=\"meter-header\">\n      <h2>{{ headerText }}</h2>\n    </div>\n    <!-- Multi-function Meter -->\n    <div class=\"meter-display\">\n      <div class=\"meter-row\">\n        <div class=\"meter-item\">\n          <h3>Voltage</h3>\n          <h1>{{ data.voltage }} V</h1>\n        </div>\n        <div class=\"meter-item\">\n          <h3>Current</h3>\n          <h1>{{ data.current }} A</h1>\n        </div>\n      </div>\n      <div class=\"meter-row\">\n        <div class=\"meter-item\">\n          <h3>Power</h3>\n          <h1>{{ data.power }} W</h1>\n        </div>\n        <div class=\"meter-item\">\n          <h3>Energy</h3>\n          <h1>{{ data.energy }} kWh</h1>\n        </div>\n      </div>\n      <div class=\"meter-row\">\n        <div class=\"meter-item\">\n          <h3>Power Factor</h3>\n          <h1>{{ data.pf }}</h1>\n        </div>\n        <div class=\"meter-item\">\n          <h3>Frequency</h3>\n          <h1>{{ data.frequency }} Hz</h1>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: {\n        type: 0, // Default to INPUT_POWER\n        voltage: 0,\n        current: 0,\n        power: 0,\n        energy: 0,\n        pf: 0,\n        frequency: 0,\n\n      },\n      dataType: {\n        INPUT_POWER: \"UPS_INPUT\",\n        OUTPUT_POWER: \"UPS_OUTPUT\",\n        MAINS: \"MAINS\",\n      },\n    };\n  },\n  computed: {\n    // Determine header text based on data type\n    headerText() {\n      return this.data.type === this.dataType.INPUT_POWER\n        ? \"Input Power\"\n        : \"Output Power\";\n    },\n  },\n  methods: {\n    updatePowerData(payload) {\n      if (payload) {\n        this.data = { ...this.data, ...payload }; // Merge new data with existing data\n      } else {\n        console.error(\"Invalid payload:\", payload);\n      }\n    },\n  },\n  mounted() {\n    this.$watch(\n      \"msg\",\n      (newMsg) => {\n        if (newMsg && newMsg.payload) {\n          this.updatePowerData(newMsg.payload);\n        }\n      },\n      { deep: true }\n    );\n  },\n};\n</script>\n\n<style scoped>\n/* Outer Container */\n.meter-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  background-color: #222;\n  border-radius: 10px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);\n  max-width: 600px;\n  margin: auto;\n}\n\n/* Header Styling */\n.meter-header {\n  margin-bottom: 15px;\n  text-align: center;\n}\n\n.meter-header h2 {\n  color: #fff;\n  font-family: \"Courier New\", Courier, monospace;\n  font-size: 1.5rem;\n  margin: 0;\n}\n\n/* Inner Display */\n.meter-display {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-family: \"Courier New\", Courier, monospace;\n  color: #fff;\n}\n\n/* Rows for Data */\n.meter-row {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n}\n\n/* Individual Items */\n.meter-item {\n  background-color: #333;\n  flex: 1;\n  padding: 15px;\n  border-radius: 8px;\n  text-align: center;\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.7);\n}\n\n/* Heading and Value Styling */\n.meter-item h3 {\n  margin: 0;\n  font-size: 1rem;\n  color: #aaa;\n}\n\n.meter-item h1 {\n  margin: 5px 0 0;\n  font-size: 1.5rem;\n  color: #fff;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 660,
        "y": 780,
        "wires": [
            [
                "9feae0311f0771f8"
            ]
        ]
    },
    {
        "id": "c0cdc61cfda7f36f",
        "type": "function",
        "z": "46413099658d8708",
        "name": "random_input_power",
        "func": "// Function node to generate random power data and assign to msg.payload.data\nmsg.payload = {\n  \n        type: \"UPS_INPUT\", // Randomly assign type 0 (INPUT_POWER) or 1 (OUTPUT_POWER)\n        voltage: (Math.random() * 50 + 200).toFixed(2), // Random voltage between 200V and 250V\n        current: (Math.random() * 10 + 1).toFixed(2),   // Random current between 1A and 10A\n        power: (Math.random() * 1000 + 100).toFixed(2), // Random power between 100W and 1100W\n        energy: (Math.random() * 10 + 0.5).toFixed(2),  // Random energy between 0.5kWh and 10.5kWh\n        pf: (Math.random() * 0.5 + 0.5).toFixed(2),     // Random power factor between 0.5 and 1.0\n        frequency: (Math.random() * 5 + 45).toFixed(2)  // Random frequency between 45Hz and 50Hz\n    \n};\n\nglobal.set(\"inputPdata\",msg.payload);\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 720,
        "wires": [
            [
                "ddde2940ca2fe7fe"
            ]
        ]
    },
    {
        "id": "ed6919bf01d28de8",
        "type": "inject",
        "z": "46413099658d8708",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 820,
        "wires": [
            [
                "75fa05daa403b11c",
                "839f402a185e885f",
                "47585c468c9ebe2f",
                "c0cdc61cfda7f36f"
            ]
        ]
    },
    {
        "id": "47585c468c9ebe2f",
        "type": "function",
        "z": "46413099658d8708",
        "name": "random_outout_power",
        "func": "// Function node to generate random power data and assign to msg.payload.data\nmsg.payload = {\n   \n        type: \"UPS_OUTPUT\", // Randomly assign type 0 (INPUT_POWER) or 1 (OUTPUT_POWER)\n        voltage: (Math.random() * 50 + 200).toFixed(2), // Random voltage between 200V and 250V\n        current: (Math.random() * 10 + 1).toFixed(2),   // Random current between 1A and 10A\n        power: (Math.random() * 1000 + 100).toFixed(2), // Random power between 100W and 1100W\n        energy: (Math.random() * 10 + 0.5).toFixed(2),  // Random energy between 0.5kWh and 10.5kWh\n        pf: (Math.random() * 0.5 + 0.5).toFixed(2),     // Random power factor between 0.5 and 1.0\n        frequency: (Math.random() * 5 + 45).toFixed(2)  // Random frequency between 45Hz and 50Hz\n   \n};\nglobal.set(\"outputPdata\",msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 920,
        "wires": [
            [
                "9de60c78c8758b1e"
            ]
        ]
    },
    {
        "id": "9de60c78c8758b1e",
        "type": "ui-template",
        "z": "46413099658d8708",
        "group": "eaf9e02b16206474",
        "page": "",
        "ui": "",
        "name": "POWER_METER_OUTPUT POWER",
        "order": 2,
        "width": 5,
        "height": null,
        "head": "",
        "format": "<template>\n  <div class=\"meter-container\">\n    <!-- Dynamic Header -->\n    <div class=\"meter-header\">\n      <h2>{{ headerText }}</h2>\n    </div>\n    <!-- Multi-function Meter -->\n    <div class=\"meter-display\">\n      <div class=\"meter-row\">\n        <div class=\"meter-item\">\n          <h3>Voltage</h3>\n          <h1>{{ data.voltage }} V</h1>\n        </div>\n        <div class=\"meter-item\">\n          <h3>Current</h3>\n          <h1>{{ data.current }} A</h1>\n        </div>\n      </div>\n      <div class=\"meter-row\">\n        <div class=\"meter-item\">\n          <h3>Power</h3>\n          <h1>{{ data.power }} W</h1>\n        </div>\n        <div class=\"meter-item\">\n          <h3>Energy</h3>\n          <h1>{{ data.energy }} kWh</h1>\n        </div>\n      </div>\n      <div class=\"meter-row\">\n        <div class=\"meter-item\">\n          <h3>Power Factor</h3>\n          <h1>{{ data.pf }}</h1>\n        </div>\n        <div class=\"meter-item\">\n          <h3>Frequency</h3>\n          <h1>{{ data.frequency }} Hz</h1>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      data: {\n        type: 0, // Default to INPUT_POWER\n        voltage: 0,\n        current: 0,\n        power: 0,\n        energy: 0,\n        pf: 0,\n        frequency: 0,\n\n      },\n      dataType: {\n        INPUT_POWER: \"UPS_INPUT\",\n        OUTPUT_POWER: \"UPS_OUTPUT\",\n        MAINS: \"MAINS\",\n      },\n    };\n  },\n  computed: {\n    // Determine header text based on data type\n    headerText() {\n      return this.data.type === this.dataType.INPUT_POWER\n        ? \"Input Power\"\n        : \"Output Power\";\n    },\n  },\n  methods: {\n    updatePowerData(payload) {\n      if (payload) {\n        this.data = { ...this.data, ...payload }; // Merge new data with existing data\n      } else {\n        console.error(\"Invalid payload:\", payload);\n      }\n    },\n  },\n  mounted() {\n    this.$watch(\n      \"msg\",\n      (newMsg) => {\n        if (newMsg && newMsg.payload) {\n          this.updatePowerData(newMsg.payload);\n        }\n      },\n      { deep: true }\n    );\n  },\n};\n</script>\n\n<style scoped>\n/* Outer Container */\n.meter-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  background-color: #222;\n  border-radius: 10px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);\n  max-width: 600px;\n  margin: auto;\n}\n\n/* Header Styling */\n.meter-header {\n  margin-bottom: 15px;\n  text-align: center;\n}\n\n.meter-header h2 {\n  color: #fff;\n  font-family: \"Courier New\", Courier, monospace;\n  font-size: 1.5rem;\n  margin: 0;\n}\n\n/* Inner Display */\n.meter-display {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-family: \"Courier New\", Courier, monospace;\n  color: #fff;\n}\n\n/* Rows for Data */\n.meter-row {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n}\n\n/* Individual Items */\n.meter-item {\n  background-color: #333;\n  flex: 1;\n  padding: 15px;\n  border-radius: 8px;\n  text-align: center;\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.7);\n}\n\n/* Heading and Value Styling */\n.meter-item h3 {\n  margin: 0;\n  font-size: 1rem;\n  color: #aaa;\n}\n\n.meter-item h1 {\n  margin: 5px 0 0;\n  font-size: 1.5rem;\n  color: #fff;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "149fdb7b24b4b6ac",
        "type": "ui-template",
        "z": "46413099658d8708",
        "group": "ac18f679c10f1fd0",
        "page": "",
        "ui": "",
        "name": "BACKUP TEST",
        "order": 1,
        "width": 0,
        "height": 9,
        "head": "",
        "format": "<template>\n    <div class=\"backup-test-ui\">\n        <h1>Backup Test Control</h1>\n        <div>\n            <div>\n                <!-- Setting ID Dropdown -->\n                <label for=\"setting_id\">Report Settings ID:</label>\n                <select v-model=\"formData.setting_id\" id=\"setting_id\" required>\n                    <option v-for=\"id in settingOptions\" :key=\"id\" :value=\"id\">{{ id }}</option>\n                </select>\n\n                <label for=\"load-type\">Load Type:</label>\n                <select v-model=\"formData.loadType\" id=\"load-type\" required>\n                    <option v-for=\"(value, key) in loadTypes\" :key=\"key\" :value=\"value\">\n                        {{ key }}\n                    </option>\n                </select>\n            </div>\n            <div>\n                <!-- MODE -->\n                <label for=\"mode\">Mode:</label>\n                <select v-model=\"formData.mode\" id=\"mode\" required>\n                    <option v-for=\"(value, key) in MODE\" :key=\"value\" :value=\"value\">\n                        {{ key }}\n                    </option>\n                </select>\n            </div>\n\n            <div>\n                <label for=\"load-percentage\">Load Percentage:</label>\n                <input type=\"number\" v-model.number=\"formData.loadPercentage\" id=\"load-percentage\" required min=\"0\"\n                    max=\"100\" />\n            </div>\n            <!-- Step ID -->\n            <label for=\"step-id\">Step ID:</label>\n            <input type=\"number\" v-model.number=\"formData.stepId\" id=\"step-id\" required min=\"0\" />\n\n            <!-- Run Interval -->\n            <label for=\"run-interval\">Run Interval (seconds):</label>\n            <input type=\"number\" v-model.number=\"formData.runInterval\" id=\"run-interval\" required min=\"1\" />\n            <!-- Display Setting Data -->\n            <div v-if=\"selectedSetting\">\n                <h3>Setting Details:</h3>\n                <p><strong>Report Id:</strong> {{ selectedSetting.report_id }}</p>\n                <p><strong>Standard:</strong> {{ selectedSetting.standard }}</p>\n                <p><strong>UPS Model:</strong> {{ selectedSetting.ups_model }}</p>\n                <p><strong>Client Name:</strong> {{ selectedSetting.client_name }}</p>\n                <p><strong>Brand Name:</strong> {{ selectedSetting.brand_name }}</p>\n                <p><strong>Test Engineer Name:</strong> {{ selectedSetting.test_engineer_name }}</p>\n                <p><strong>Test Approval Name:</strong> {{ selectedSetting.test_approval_name }}</p>\n                <p><strong>UPS SPEC ID:</strong> {{ selectedSetting.spec_id }}</p>\n                <p><strong>UPS VA :</strong> {{ selectedSpec?.rating_va || 'N/A' }}</p>\n                <p>Selected Spec: {{ selectedSpec }}</p>\n\n\n\n            </div>\n\n            <div class=\"buttons\">\n                <button type=\"button\" @click=\"startBackupTest\" :disabled=\"backupTestRunning\">Start Test</button>\n\n                <button type=\"button\" @click=\"stopBackupTest\" :disabled=\"!backupTestRunning\">Stop Test</button>\n            </div>\n        </div>\n\n        <div v-if=\"backupTestRunning\" class=\"test-status\">\n            <p>Test running... Backup time: {{ BackUpTestData.BackupTime }} seconds</p>\n        </div>\n        <div v-if=\"!backupTestRunning && BackUpTestData.BackupTime > 0\" class=\"test-result\">\n            <h2>Test Result</h2>\n            <p>Total Backup Time: {{ BackUpTestData.BackupTime }} seconds</p>\n            <ul>\n                <li v-for=\"(value, key) in BackUpTestData\" :key=\"key\">\n                    {{ key }}: {{ value }}\n                </li>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            test_duration: 0,\n\n            measurementIdCounter: 0,\n            subreport_id: 0,\n            first_measurement_taken: false,\n            test_report: null,\n            latest_settings_id: 0,\n            test_type: 9,\n            setting: [],\n            all_spec: [],\n            TestType: {\n                LIGHT_LOAD_AND_FUNCTION_TEST: 0,\n                NO_LOAD_TEST: 1,\n                FULL_LOAD_TEST: 2,\n                AC_INPUT_FAILURE: 3,\n                AC_INPUT_RETURN: 4,\n                INPUT_POWER_FACTOR: 5,\n                CHANGE_OPERATION_MODE: 6,\n                STORED_ENERGY_TIME: 7,\n                SwitchTest: 8,\n                BackupTest: 9,\n                EfficiencyTest: 10,\n                SteadyState_InputVoltage_Test: 11,\n                WaveformTest: 12,\n                EFFICIENCY_NORMAL_MODE: 14,\n                EFFICIENCY_STORAGE_MODE: 15,\n                OVERLOAD_NORMAL_MODE: 16,\n                OVERLOAD_STORAGE_MODE: 17,\n            },\n            TestResult: {\n                TEST_FAILED: \"TEST_FAILED\",\n                TEST_PENDING: \"TEST_PENDING\",\n                TEST_SUCCESSFUL: \"TEST_SUCCESSFUL\",\n                USER_OBSERVATION: \"USER_OBSERVATION\",\n            },\n            loadTypes: {\n                LINEAR: \"LINEAR\",\n                NON_LINEAR: \"NON_LINEAR\",\n            },\n            MODE: {\n                NORMAL_MODE: \"NORMAL_MODE\",\n                STORAGE_MODE: \"STORAGE_MODE\",\n                FAULT_MODE: \"FAULT_MODE\",\n                ALARM_MODE: \"ALARM_MODE\",\n            },\n            formData: {\n                setting_id: 0,\n                spec_id: 0,\n                loadType: \"LINEAR\",\n                mode: \"NORMAL_MODE\",\n                loadPercentage: 0,\n                runInterval: 0,\n                stepId: 0,\n            },\n            backupTestRunning: false,\n\n            BackUpTestCMDS: {\n                cmd_mains_input: 1,\n                alarm_status: 0,\n                backupTestRunning: false,\n            },\n\n            BackUpTestData: {\n                BackupTime: 0,\n                inputPdata: {},\n                outputPdata: {},\n            },\n            BackUpTestSense: {\n\n                sense_mains_input: 1,\n                sense_ups_output: 0,\n\n            },\n\n            measurements: [],\n        };\n    },\n    computed: {\n        settingOptions() {\n            return this.setting.map((setting) => setting.id || 0).sort((a, b) => a - b);\n        },\n        selectedSetting() {\n            return this.setting.find((setting) => setting.id === this.formData.setting_id) || null;\n        },\n\n        selectedSpec() {\n            // Fetch the spec from `all_spec` using the spec_id from the selected setting\n            const specId = this.selectedSetting?.spec_id;\n            return this.all_spec.find((spec) => spec.id === specId) || null;\n        },\n    },\n    methods: {\n\n        resetTestState() {\n            this.BackUpTestData = {\n                BackupTime: 0,\n                inputPdata: {},\n                outputPdata: {},\n            };\n            this.measurementIdCounter = 0;\n            this.subreport_id = 0;\n            this.first_measurement_taken = false;\n            this.test_duration = 0;\n            this.measurements = [];\n            this.send({ topic: 'info', payload: \"data has been reset\" });\n        },\n        generateSubReportId(testType, mainReportId) {\n\n            if (!mainReportId || !Number.isInteger(mainReportId) || mainReportId.toString().length !== 8) {\n                throw new Error(\"Invalid mainReportId: must be an 8-digit number.\");\n            }\n            if (!Number.isInteger(testType) || testType < 0 || testType > 99) {\n                throw new Error(\"Invalid testType: must be a 2-digit number.\");\n            }\n            const subReportId = Number(`${mainReportId}${testType.toString().padStart(2, '0')}`);\n            return subReportId;\n        },\n        generateMeasurementId(testType, mainReportId) {\n\n\n            if (!Number.isInteger(mainReportId) || mainReportId.toString().length !== 8) {\n                throw new Error(\"Invalid mainReportId: must be an 8-digit number.\");\n            }\n            const validTestTypes = [\n                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17,\n            ];\n            if (!validTestTypes.includes(testType)) {\n                throw new Error(`Invalid testType: ${testType} is not a valid test type.`);\n            }\n            this.measurementIdCounter += 1;\n\n            if (this.measurementIdCounter > 99) {\n                this.measurementIdCounter = 1;\n            }\n            const testTypePart = String(testType).padStart(2, \"0\");\n            const reportPart = String(mainReportId).slice(-5);\n            const counterPart = String(this.measurementIdCounter).padStart(2, \"0\");\n            const measurementId = Number(`${testTypePart}${reportPart}${counterPart}`);\n            return measurementId;\n        },\n\n\n\n        generateMeasurement(testType, mainReportId) {\n            const uniqueId = this.generateMeasurementId(testType, mainReportId);\n            const timestamp = new Date();\n\n            return {\n                m_unique_id: uniqueId,\n                time_stamp: timestamp.getTime(),\n                name: \"Measurement Backup test\",\n                mode: this.formData.mode,\n                phase_name: \"Phase A\",\n                load_type: this.formData.loadType,\n                step_id: this.formData.stepId,\n                load_percentage: this.formData.loadPercentage,\n                power_measures: [this.BackUpTestData.inputPdata, this.BackUpTestData.outputPdata],\n                steady_state_voltage_tol: 0,\n                voltage_dc_component: 0,\n                load_pf_deviation: 0,\n                switch_time_ms: 0,\n                run_interval_sec: this.formData.runInterval,\n                backup_time_sec: this.BackUpTestData.BackupTime,\n                overload_time_sec: 0,\n                temperature_1: 0,\n                temperature_2: 0,\n            };\n        },\n        createTestReport() {\n            const report = {\n                settings: this.selectedSetting || {},\n                spec: this.selectedSpec || {},\n                subreport_id: this.subreport_id,\n                test_name: \"BackupTest\",\n                test_description: \"Backup Test Report\",\n                measurements: this.measurements,\n                test_result: \"USER_OBSERVATION\",\n            };\n\n\n            console.log(\"Generated Test Report:\", report);\n            return report;\n        },\n\n        updateBackUptestSense(payload) {\n            if (payload && payload.BackUpTestSense) {\n                const { BackUpTestSense } = payload;\n                this.BackUpTestSense = {\n                    sense_mains_input: BackUpTestSense.sense_mains_input ?? 1,\n                    sense_ups_output: BackUpTestSense.sense_ups_output ?? 0,\n                };\n\n                console.log(\"Updated  BackUpTestSense:\", this.BackUpTestSense);\n            } else {\n                console.warn(\"Invalid payload or missing  BackUpTestSense:\", payload);\n            }\n        },\n\n        updateBackUpTestData(payload) {\n            if (payload && payload.BackUpTestData) {\n                const { BackUpTestData } = payload;\n                this.BackUpTestData = {\n                    BackupTime: BackUpTestData.BackupTime ?? 0,\n                    inputPdata: BackUpTestData.inputPdata || {},\n                    outputPdata: BackUpTestData.outputPdata || {},\n                };\n                console.log(\"Updated BackUpTestData:\", this.BackUpTestData);\n            } else {\n                console.warn(\"Invalid payload or missing BackUpTestData:\", payload);\n            }\n        },\n        updateSettingData(payload) {\n            if (payload && payload.SettingData && Array.isArray(payload.SettingData.settings)) {\n                this.setting = payload.SettingData.settings;\n                this.all_spec = payload.SettingData.spec || [];\n            } else {\n                console.warn(\"No valid settings data received in payload\", payload);\n                this.setting = [];\n                this.all_spec = [];\n            }\n        },\n\n        createRunCmds(overrides = {}) {\n            return {\n                alarm_status: this.BackUpTestCMDS.alarm_status,\n                cmd_mains_input: this.BackUpTestCMDS.cmd_mains_input,\n                backupTestRunning: this.backupTestRunning,\n                backupTestRunning: this.BackUpTestCMDS.backupTestRunning,\n                BackupTime: this.BackUpTestData.BackupTime,\n                additionalData: {\n                    setting_id: this.formData.setting_id,\n                    loadType: this.formData.loadType,\n                    stepId: this.formData.stepId,\n                    loadPercentage: this.formData.loadPercentage,\n                },\n                ...overrides,\n            };\n        },\n        sendMessage(payload) {\n\n            this.$socket.emit('msg-output:' + this.id, { payload });\n        },\n        async delay(ms) {\n            return new Promise((resolve) => setTimeout(resolve, ms));\n        },\n        async startBackupTest() {\n            this.resetTestState();\n\n            this.send({\n                topic: 'commands', payload: this.createRunCmds()\n            });\n            this.send({\n                topic: 'reset', payload: false\n            });\n            await this.delay(1000);\n            const mainReportId = this.selectedSetting.report_id || 10000000; // Ensure fallback is valid\n\n            this.subreport_id = this.generateSubReportId(9, mainReportId);\n\n            this.send({\n                topic: 'info', payload: \"starting backup Test\"\n            });\n\n            this.backupTestRunning = true;\n            this.BackUpTestCMDS.backupTestRunning = true;\n            this.send({\n                topic: 'commands', payload: this.createRunCmds({\n                    backupTestRunning: true,\n                })\n            });\n\n            try {\n                await this.delay(2000);\n                this.BackUpTestCMDS.alarm_status = 1;\n                this.send({\n                    topic: 'commands', payload: this.createRunCmds({\n                        alarm_status: 1,\n                    })\n                });\n                await this.delay(2000);\n                this.BackUpTestCMDS.alarm_status = 0;\n                this.send({\n                    topic: 'commands', payload: this.createRunCmds({\n                        alarm_status: 0\n                    })\n                });\n                await this.delay(2000);\n\n                this.BackUpTestCMDS.cmd_mains_input = 0;\n                this.send({\n                    topic: 'commands', payload: this.createRunCmds({\n                        cmd_mains_input: 0\n                    })\n                });\n                await this.delay(2000);\n                const maxRetries = 100;\n                let retryCount = 0;\n\n                while (this.BackUpTestSense.sense_mains_input !== 0) {\n                    await this.delay(100);\n                    retryCount++;\n                    if (retryCount > maxRetries) {\n                        throw new Error(\"Timeout: sense_mains_input did not change to 0\");\n                    }\n                    if (!this.backupTestRunning) throw new Error(\"Test stopped\");\n                }\n\n                retryCount = 0; // Reset for next loop\n                while (this.BackUpTestSense.sense_ups_output !== 1) {\n                    await this.delay(100);\n                    retryCount++;\n                    if (retryCount > maxRetries) {\n                        throw new Error(\"Timeout: sense_ups_output did not change to 1\");\n                    }\n                    if (!this.backupTestRunning) throw new Error(\"Test stopped\");\n                }\n\n\n                while (this.BackUpTestSense.sense_ups_output === 1 && this.BackUpTestSense.sense_mains_input === 0) {\n                    if (!this.backupTestRunning) {\n                        this.send({ topic: 'info', payload: \"Stop cmd during run\" });\n                        throw new Error(\"Test stopped during main loop\");\n                    }\n\n                    this.send({ topic: 'info', payload: \"running backup Test\" });\n                    await this.delay(1000);\n\n                    this.BackUpTestData.BackupTime++;\n                    this.test_duration++;\n                    if (!this.first_measurement_taken) {\n                        const measurement = this.generateMeasurement(9, mainReportId);\n                        if (this.measurements.length > 1000) {\n                            this.measurements.shift();\n                        }\n                        this.measurements.push(measurement);\n                        this.send({ topic: 'info', payload: \"first measurement recorded\" });\n                        this.first_measurement_taken = true;\n                    }\n                    let run_interval = this.formData.runInterval;\n\n                    if (this.test_duration % run_interval === 0) {\n                        const measurement = this.generateMeasurement(9, mainReportId);\n                        if (this.measurements.length > 1000) {\n                            this.measurements.shift();\n                        }\n                        this.measurements.push(measurement);\n                        this.send({ topic: 'info', payload: \"new measurement recorded\" });\n                    }\n\n                    this.send({ topic: 'commands', payload: this.createRunCmds() });\n\n\n                    if (this.BackUpTestSense.sense_ups_output === 0) {\n                        this.send({\n                            topic: 'info',\n                            payload: `UPS output stopped. Recording final backup time: ${this.BackUpTestData.BackupTime} seconds`,\n                        });\n\n                        // Generate and record the final measurement\n                        const finalMeasurement = this.generateMeasurement(9, mainReportId);\n                        if (this.measurements.length === 0 ||\n                            this.measurements[this.measurements.length - 1].backup_time_sec !== finalMeasurement.backup_time_sec) {\n                            this.measurements.push(finalMeasurement);\n                        }\n\n                        this.send({\n                            topic: 'info',\n                            payload: \"Final measurement recorded\",\n                        });\n                        break;\n                    }\n                }\n            } catch (error) {\n                console.error(error.message);\n            } finally {\n                this.stopBackupTest();\n            }\n        },\n\n        async stopBackupTest() {\n            this.send({\n                topic: 'info', payload: \"stopping backup Test \"\n            });\n\n            // Ensure proper states are set\n            this.backupTestRunning = false;\n            this.BackUpTestCMDS.backupTestRunning = false;\n\n            // Send command to set cmd_mains_input to 1\n            this.BackUpTestCMDS.cmd_mains_input = 1;\n            await this.send({\n                topic: 'commands',\n                payload: this.createRunCmds({\n                    alarm_status: 0,\n                    cmd_mains_input: 1,\n                    backupTestRunning: false\n                }),\n            });\n\n            // Update internal state to reflect changes\n            this.BackUpTestCMDS = {\n                ...this.BackUpTestCMDS,\n                alarm_status: 0,\n                cmd_mains_input: 1,\n                backupTestRunning: false,\n            };\n\n            // Generate and send the test report\n            this.testReport = this.createTestReport();\n            this.send({ topic: 'report', payload: this.testReport });\n\n            // Log for debugging\n            console.log(\"Backup test stopped. CMD mains input set to 1:\", this.BackUpTestCMDS);\n        }\n\n    },\n    mounted() {\n        this.$watch(\"msg\", (newMsg) => {\n            if (newMsg && newMsg.payload) {\n                this.updateSettingData(newMsg.payload);\n                this.updateBackUptestSense(newMsg.payload);\n                this.updateBackUpTestData(newMsg.payload);\n\n\n            }\n        });\n    },\n};\n</script>\n\n\n<style scoped>\n.backup-test-ui {\n    max-width: 450px;\n    margin: 30px auto;\n    font-family: 'Arial', sans-serif;\n    background-color: #f4f6f9;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    font-size: 24px;\n    color: #333;\n    margin-bottom: 20px;\n    text-align: center;\n}\n\nlabel {\n    font-size: 14px;\n    color: #555;\n    display: block;\n    margin-bottom: 5px;\n}\n\ninput,\nselect {\n    width: 100%;\n    padding: 10px;\n    margin-bottom: 15px;\n    border-radius: 5px;\n    border: 1px solid #ccc;\n    font-size: 14px;\n    background-color: #fff;\n    transition: border-color 0.3s, box-shadow 0.3s;\n}\n\ninput:focus,\nselect:focus {\n    border-color: #007bff;\n    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);\n}\n\n.buttons {\n    display: flex;\n    justify-content: space-between;\n    gap: 10px;\n    margin-top: 20px;\n}\n\nbutton {\n    padding: 12px 20px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s, transform 0.3s;\n}\n\nbutton:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n}\n\nbutton:hover {\n    background-color: #0056b3;\n    transform: scale(1.05);\n}\n\nbutton:active {\n    background-color: #004085;\n}\n\n.test-status,\n.test-result {\n    background-color: #ffffff;\n    padding: 15px;\n    border-radius: 8px;\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);\n    margin-top: 20px;\n}\n\n.test-status p,\n.test-result p {\n    font-size: 16px;\n    color: #333;\n}\n\n.test-result h2 {\n    font-size: 20px;\n    color: #007bff;\n    margin-bottom: 10px;\n}\n\nul {\n    list-style-type: none;\n    padding-left: 0;\n}\n\nli {\n    font-size: 14px;\n    color: #555;\n    margin-bottom: 8px;\n}\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 540,
        "y": 360,
        "wires": [
            [
                "c95fb50fa1487318",
                "a79efce47d07383f"
            ]
        ]
    },
    {
        "id": "ca1b9390bd705a46",
        "type": "function",
        "z": "46413099658d8708",
        "name": "Fecth BackUp Test Data",
        "func": "function checkUndefined(value) {\n    return value !== undefined;\n}\n\nlet BackUpTestData = {\n    isValid: true, // Start as valid and check for invalid cases.\n    BackupTime: global.get(\"BackupTime\"),    \n    inputPdata: global.get(\"inputPdata\"),\n    outputPdata: global.get(\"outputPdata\")\n   \n};\n\nlet BackUpTestSense={\n    isValid: true,\n    sense_mains_input: global.get(\"sense_mains_input\"),\n    sense_ups_output: global.get(\"sense_ups_output\"),\n};\n\n// Validate all fields\nBackUpTestData.isValid = [\n    BackUpTestData.BackupTime, \n    BackUpTestData.inputPdata,\n    BackUpTestData.outputPdata,\n\n].every(checkUndefined);\n\nBackUpTestSense.isValid = [\n    BackUpTestSense.sense_mains_input,   \n    BackUpTestSense.sense_ups_output  \n\n].every(checkUndefined);\n\n\n\nlet SettingData = {\n    latest_setting_id: global.get(\"latest_setting_id\") || 0,\n    settings: global.get(\"settings\") || [],\n    spec:global.get(\"spec\")||[],\n};\n\n// Construct the message payload\nmsg.payload = {\n    BackUpTestData: BackUpTestData,\n    BackUpTestSense:BackUpTestSense,\n    SettingData: SettingData\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 460,
        "wires": [
            [
                "149fdb7b24b4b6ac",
                "127d4bff99bdcaab"
            ]
        ]
    },
    {
        "id": "5912c7da100db663",
        "type": "inject",
        "z": "46413099658d8708",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "ca1b9390bd705a46"
            ]
        ]
    },
    {
        "id": "f3556767d993e1de",
        "type": "function",
        "z": "46413099658d8708",
        "name": "update global",
        "func": "let alarm_status=msg.payload.alarm_status;\nlet cmd_mains_input=msg.payload.cmd_mains_input;\nlet backupTestRunning=msg.payload.backupTestRunning;\n\nlet BackupTime=msg.payload.BackupTime;\n\nglobal.set(\"alarm_status\",alarm_status);\nglobal.set(\"cmd_mains_input\",cmd_mains_input);\nglobal.set(\"backupTestRunning\",backupTestRunning);\nglobal.set(\"BackupTime\",BackupTime);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "394d8f14251f9d52",
        "type": "debug",
        "z": "46413099658d8708",
        "name": "BACKUP TEST RUN",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1170,
        "y": 200,
        "wires": []
    },
    {
        "id": "c95fb50fa1487318",
        "type": "switch",
        "z": "46413099658d8708",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "commands",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "report",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "info",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 710,
        "y": 360,
        "wires": [
            [
                "f3556767d993e1de",
                "394d8f14251f9d52"
            ],
            [
                "39303c6098630a32",
                "bb5af27275e2ee33"
            ],
            [
                "2919948f84647257",
                "1e34061ea17100ad"
            ],
            [
                "62eb936d918d3302"
            ]
        ]
    },
    {
        "id": "39303c6098630a32",
        "type": "debug",
        "z": "46413099658d8708",
        "name": "TEST REPORT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 320,
        "wires": []
    },
    {
        "id": "75fa05daa403b11c",
        "type": "change",
        "z": "46413099658d8708",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "inputPdata",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 780,
        "wires": [
            [
                "ddde2940ca2fe7fe"
            ]
        ]
    },
    {
        "id": "d7ed4a435952fd08",
        "type": "rbe",
        "z": "46413099658d8708",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.BackUpTestData",
        "topi": "topic",
        "x": 690,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "2919948f84647257",
        "type": "debug",
        "z": "46413099658d8708",
        "name": "INFO",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 360,
        "wires": []
    },
    {
        "id": "127d4bff99bdcaab",
        "type": "switch",
        "z": "46413099658d8708",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "payload.BackUpTestData",
                "vt": "msg"
            },
            {
                "t": "cont",
                "v": "payload.BackUpTestSense",
                "vt": "msg"
            },
            {
                "t": "cont",
                "v": "payload.SettingData",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 530,
        "y": 540,
        "wires": [
            [
                "d7ed4a435952fd08"
            ],
            [
                "e330bd09a37ce12c"
            ],
            [
                "c5a8c5f97f046d85"
            ]
        ]
    },
    {
        "id": "e330bd09a37ce12c",
        "type": "rbe",
        "z": "46413099658d8708",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.BackUpTestSense",
        "topi": "topic",
        "x": 690,
        "y": 560,
        "wires": [
            [
                "246b8d99b59e648a"
            ]
        ]
    },
    {
        "id": "246b8d99b59e648a",
        "type": "debug",
        "z": "46413099658d8708",
        "name": "BackUpTestSENSE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.BackUpTestSense",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 560,
        "wires": []
    },
    {
        "id": "c5a8c5f97f046d85",
        "type": "rbe",
        "z": "46413099658d8708",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.SettingData",
        "topi": "topic",
        "x": 690,
        "y": 600,
        "wires": [
            [
                "641d81440b890efe"
            ]
        ]
    },
    {
        "id": "641d81440b890efe",
        "type": "debug",
        "z": "46413099658d8708",
        "name": "SETTING DATA",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.SettingData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 600,
        "wires": []
    },
    {
        "id": "1e34061ea17100ad",
        "type": "ui-text",
        "z": "46413099658d8708",
        "group": "ac18f679c10f1fd0",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "INFO",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 1130,
        "y": 460,
        "wires": []
    },
    {
        "id": "839f402a185e885f",
        "type": "change",
        "z": "46413099658d8708",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "outputPdata",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 880,
        "wires": [
            [
                "9de60c78c8758b1e"
            ]
        ]
    },
    {
        "id": "bb5af27275e2ee33",
        "type": "link out",
        "z": "46413099658d8708",
        "name": "test_report_out",
        "mode": "link",
        "links": [
            "b89c21b9c5642159"
        ],
        "x": 1335,
        "y": 340,
        "wires": []
    },
    {
        "id": "a79efce47d07383f",
        "type": "debug",
        "z": "46413099658d8708",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 440,
        "wires": []
    },
    {
        "id": "62eb936d918d3302",
        "type": "link out",
        "z": "46413099658d8708",
        "name": "back_up_test_reset_out",
        "mode": "link",
        "links": [
            "417ec4018e3df706",
            "2498d1acf7fb0c00",
            "3bb33a88dfacf747"
        ],
        "x": 875,
        "y": 440,
        "wires": []
    },
    {
        "id": "9feae0311f0771f8",
        "type": "ui-chart",
        "z": "46413099658d8708",
        "group": "eaf9e02b16206474",
        "name": "",
        "label": "VOLTAGE VARIATION",
        "order": 3,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "volatge",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 9,
        "height": 10,
        "className": "",
        "interpolation": "linear",
        "x": 980,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "eaf9e02b16206474",
        "type": "ui-group",
        "name": "OUTPUT_DATA",
        "page": "7d0f53039d1540b1",
        "width": 9,
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "output_data",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "ac18f679c10f1fd0",
        "type": "ui-group",
        "name": "TEST_CONTROL",
        "page": "7d0f53039d1540b1",
        "width": 3,
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "test_control",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "7d0f53039d1540b1",
        "type": "ui-page",
        "name": "BACKUP_TEST",
        "ui": "6bb6879aa70631ea",
        "path": "/backup_test",
        "icon": "battery-clock",
        "layout": "grid",
        "theme": "f51f9a07212ff54b",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 4,
        "className": "backup_test",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "6bb6879aa70631ea",
        "type": "ui-base",
        "name": "UPS Tester",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": "1",
        "showDisconnectNotification": true
    },
    {
        "id": "f51f9a07212ff54b",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#d1479f",
            "primary": "#0094ce",
            "bgPage": "#ededed",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    }
]