[
    {
        "id": "4ec0a7f75863202f",
        "type": "tab",
        "label": "REPORT_UPDATE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b89c21b9c5642159",
        "type": "link in",
        "z": "4ec0a7f75863202f",
        "name": "REPORT_IN",
        "links": [
            "bb5af27275e2ee33"
        ],
        "x": 75,
        "y": 220,
        "wires": [
            [
                "d45672f67dbbab27"
            ]
        ]
    },
    {
        "id": "83e451fc86ef20c7",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "SIMULATE REPORT",
        "func": "// Simulated payload\nmsg.payload = {\n    \"settings\": {\n        \"id\": 3,\n        \"report_id\": 61749681,\n        \"standard\": \"IEC_62040_1\",\n        \"ups_model\": \"UVA-123\",\n        \"client_name\": \"Walton\",\n        \"brand_name\": \"Walton\",\n        \"test_engineer_name\": \"Engr Atik\",\n        \"test_approval_name\": \"Engr Jhon\",\n        \"spec_id\": 3\n    },\n    \"test_name\": 9,\n    \"test_description\": \"Backup Test Report\",\n    \"measurements\": [\n        {\n            \"m_unique_id\": 2460957260,\n            \"time_stamp\": 1735664426194,\n            \"name\": \"Measurement Backup test\",\n            \"mode\": 0,\n            \"phase_name\": \"Phase A\",\n            \"load_type\": 0,\n            \"step_id\": 0,\n            \"load_percentage\": 0,\n            \"power_measures\": [\n                {\"type\": 0, \"voltage\": 0, \"current\": 0, \"power\": 0, \"energy\": 0, \"pf\": 0, \"frequency\": 0},\n                {\"type\": 1, \"voltage\": 0, \"current\": 0, \"power\": 0, \"energy\": 0, \"pf\": 0, \"frequency\": 0}\n            ],\n            \"steady_state_voltage_tol\": 0,\n            \"voltage_dc_component\": 0,\n            \"load_pf_deviation\": 0,\n            \"switch_time_ms\": 0,\n            \"run_interval_sec\": 10,\n            \"backup_time_sec\": 0,\n            \"overload_time_sec\": 0,\n            \"temperature_1\": 0,\n            \"temperature_2\": 0\n        },\n        {\n            \"m_unique_id\": 1180751406,\n            \"time_stamp\": 1735664443466,\n            \"name\": \"Measurement Backup test\",\n            \"mode\": 0,\n            \"phase_name\": \"Phase A\",\n            \"load_type\": 0,\n            \"step_id\": 0,\n            \"load_percentage\": 0,\n            \"power_measures\": [\n                {\"type\": 0, \"voltage\": 0, \"current\": 0, \"power\": 0, \"energy\": 0, \"pf\": 0, \"frequency\": 0},\n                {\"type\": 1, \"voltage\": 0, \"current\": 0, \"power\": 0, \"energy\": 0, \"pf\": 0, \"frequency\": 0}\n            ],\n            \"steady_state_voltage_tol\": 0,\n            \"voltage_dc_component\": 0,\n            \"load_pf_deviation\": 0,\n            \"switch_time_ms\": 0,\n            \"run_interval_sec\": 10,\n            \"backup_time_sec\": 0,\n            \"overload_time_sec\": 0,\n            \"temperature_1\": 0,\n            \"temperature_2\": 0\n        },\n        {\n            \"m_unique_id\": 3777666032,\n            \"time_stamp\": 1735664458203,\n            \"name\": \"Measurement Backup test\",\n            \"mode\": 0,\n            \"phase_name\": \"Phase A\",\n            \"load_type\": 0,\n            \"step_id\": 0,\n            \"load_percentage\": 0,\n            \"power_measures\": [\n                {\"type\": 0, \"voltage\": 0, \"current\": 0, \"power\": 0, \"energy\": 0, \"pf\": 0, \"frequency\": 0},\n                {\"type\": 1, \"voltage\": 0, \"current\": 0, \"power\": 0, \"energy\": 0, \"pf\": 0, \"frequency\": 0}\n            ],\n            \"steady_state_voltage_tol\": 0,\n            \"voltage_dc_component\": 0,\n            \"load_pf_deviation\": 0,\n            \"switch_time_ms\": 0,\n            \"run_interval_sec\": 10,\n            \"backup_time_sec\": 0,\n            \"overload_time_sec\": 0,\n            \"temperature_1\": 0,\n            \"temperature_2\": 0\n        },\n        {\n            \"m_unique_id\": 6373995473,\n            \"time_stamp\": 1735664478197,\n            \"name\": \"Measurement Backup test\",\n            \"mode\": 0,\n            \"phase_name\": \"Phase A\",\n            \"load_type\": 0,\n            \"step_id\": 0,\n            \"load_percentage\": 0,\n            \"power_measures\": [\n                {\"type\": 0, \"voltage\": 0, \"current\": 0, \"power\": 0, \"energy\": 0, \"pf\": 0, \"frequency\": 0},\n                {\"type\": 1, \"voltage\": 0, \"current\": 0, \"power\": 0, \"energy\": 0, \"pf\": 0, \"frequency\": 0}\n            ],\n            \"steady_state_voltage_tol\": 0,\n            \"voltage_dc_component\": 0,\n            \"load_pf_deviation\": 0,\n            \"switch_time_ms\": 0,\n            \"run_interval_sec\": 10,\n            \"backup_time_sec\": 0,\n            \"overload_time_sec\": 0,\n            \"temperature_1\": 0,\n            \"temperature_2\": 0\n        },\n        {\n            \"m_unique_id\": 6010959045,\n            \"time_stamp\": 1735664498200,\n            \"name\": \"Measurement Backup test\",\n            \"mode\": 0,\n            \"phase_name\": \"Phase A\",\n            \"load_type\": 0,\n            \"step_id\": 0,\n            \"load_percentage\": 0,\n            \"power_measures\": [\n                {\"type\": 0, \"voltage\": 0, \"current\": 0, \"power\": 0, \"energy\": 0, \"pf\": 0, \"frequency\": 0},\n                {\"type\": 1, \"voltage\": 0, \"current\": 0, \"power\": 0, \"energy\": 0, \"pf\": 0, \"frequency\": 0}\n            ],\n            \"steady_state_voltage_tol\": 0,\n            \"voltage_dc_component\": 0,\n            \"load_pf_deviation\": 0,\n            \"switch_time_ms\": 0,\n            \"run_interval_sec\": 10,\n            \"backup_time_sec\": 0,\n            \"overload_time_sec\": 0,\n            \"temperature_1\": 0,\n            \"temperature_2\": 0\n        }\n    ],\n    \"test_result\": 3\n};\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 40,
        "wires": [
            [
                "d45672f67dbbab27",
                "d835063f835b621d",
                "ac7df2e2275af626"
            ]
        ]
    },
    {
        "id": "d45672f67dbbab27",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "SORT_REPORT",
        "func": "let payload = msg.payload;\n\n// Extract Settings Object\nlet settings = payload.settings;\n\n// Extract Measurements Array\nlet measurements = payload.measurements;\n\n// Extract Remaining Data\nlet { settings: _, measurements: __, ...otherObjects } = payload;\n\n// Extract all measurement IDs\nlet measurement_ids = measurements.map(measurement => measurement.m_unique_id);\n\n// Store the measurement_ids array in flow context\nflow.set(\"measurement_ids\", measurement_ids);\n\n// Prepare Outputs\nconst output = [\n    { payload: settings },         // Output 1: Settings Object\n    { payload: measurements },     // Output 2: Measurements Array\n    { payload: otherObjects }      // Output 3: Other Remaining Objects\n];\n\n// Send Result\nreturn output;\n\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 220,
        "wires": [
            [
                "0086034d5d1b5475"
            ],
            [
                "172c261c1913ab30"
            ],
            [
                "fc922076f1ffa401"
            ]
        ]
    },
    {
        "id": "0086034d5d1b5475",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "settings",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 140,
        "wires": []
    },
    {
        "id": "172c261c1913ab30",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "measurements",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 180,
        "wires": []
    },
    {
        "id": "fc922076f1ffa401",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "others",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 220,
        "wires": []
    },
    {
        "id": "112848acd093c60f",
        "type": "inject",
        "z": "4ec0a7f75863202f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "83e451fc86ef20c7"
            ]
        ]
    },
    {
        "id": "d835063f835b621d",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "ac7df2e2275af626",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "PROCESS MEASUREMENTS",
        "func": "// Helper function for delaying execution\nfunction delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Asynchronous function to process measurements\nasync function processMeasurements(measurements, send, done) {\n    for (let measurement of measurements) {\n        const measurementId = measurement.m_unique_id;\n        const powerMeasures = measurement.power_measures.map(pm => ({\n            ...pm,\n            measurement_id: measurementId\n        }));\n\n        // Send each power measure object with 1-second delay\n        for (let powerMeasure of powerMeasures) {\n            send({ payload: powerMeasure });\n            await delay(1000); // 1-second delay\n        }\n    }\n    done(); // Indicate the function has completed\n}\n\n// Main Function Logic\nlet payload = msg.payload;\n\n// Ensure the input contains measurements\nif (!payload.measurements || !Array.isArray(payload.measurements)) {\n    node.error(\"Invalid input: 'measurements' must be an array.\", msg);\n    return null;\n}\n\n// Start asynchronous processing\nprocessMeasurements(payload.measurements, node.send, () => node.done());\n\n// Return null as the function sends messages asynchronously\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 340,
        "wires": [
            [
                "24a1009b7bdba82f",
                "20450f4f7a43a947"
            ]
        ]
    },
    {
        "id": "24a1009b7bdba82f",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "power data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 340,
        "wires": []
    },
    {
        "id": "20450f4f7a43a947",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "insert _power_measures",
        "func": "// Ensure msg.payload contains the necessary data\nif (!msg.payload || typeof msg.payload !== \"object\") {\n    node.error(\"Invalid input: msg.payload must be an object.\");\n    return null;\n}\n\n// Extract powerMeasure object from msg.payload\nvar powerMeasure = msg.payload;\n\n// Validate required fields\nif (\n    powerMeasure.type === undefined ||\n    powerMeasure.voltage === undefined ||\n    powerMeasure.current === undefined ||\n    powerMeasure.power === undefined ||\n    powerMeasure.energy === undefined ||\n    powerMeasure.pf === undefined ||\n    powerMeasure.frequency === undefined ||\n    powerMeasure.measurement_id === undefined\n) {\n    node.error(\"Invalid input: msg.payload must contain all required fields.\");\n    return null;\n}\n\n// Construct the SQL query\nvar topic = `INSERT INTO PowerMeasure (type, voltage, current, power, energy, pf, frequency, measurement_id) \nVALUES (${powerMeasure.type}, ${powerMeasure.voltage}, ${powerMeasure.current}, ${powerMeasure.power}, \n${powerMeasure.energy}, ${powerMeasure.pf}, ${powerMeasure.frequency}, ${powerMeasure.measurement_id});`;\n\n// Return the query to be executed by the SQLite node\nreturn { topic: topic };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 440,
        "wires": [
            [
                "519b0cfe351f15ce"
            ]
        ]
    },
    {
        "id": "b0fe93bafaeabdf8",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 640,
        "wires": []
    },
    {
        "id": "519b0cfe351f15ce",
        "type": "sqlite",
        "z": "4ec0a7f75863202f",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 400,
        "y": 440,
        "wires": [
            [
                "712512ae60b1cdc9"
            ]
        ]
    },
    {
        "id": "712512ae60b1cdc9",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "get powermeasure id",
        "func": "msg.topic=\"SELECT last_insert_rowid()\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 440,
        "wires": [
            [
                "16e508bdf889111c"
            ]
        ]
    },
    {
        "id": "16e508bdf889111c",
        "type": "sqlite",
        "z": "4ec0a7f75863202f",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 780,
        "y": 440,
        "wires": [
            [
                "72fb27e46012366a"
            ]
        ]
    },
    {
        "id": "72fb27e46012366a",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "save power measure id",
        "func": "// Ensure msg.payload contains the ID from the query result\nif (!msg.payload || !msg.payload[0] || !msg.payload[0]['last_insert_rowid()']) {\n    node.error(\"Invalid input: msg.payload must contain the result of last_insert_rowid().\");\n    return null;\n}\n\n// Extract the last inserted row ID\nlet lastInsertId = msg.payload[0]['last_insert_rowid()'];\n\n// Retrieve the existing array from flow context or initialize it\nlet allPowerMeasureIds = flow.get(\"all_power_measure_id\") || [];\n\n// Add the new ID to the array\nallPowerMeasureIds.push(lastInsertId);\n\n// Save the updated array back to the flow context\nflow.set(\"all_power_measure_id\", allPowerMeasureIds);\n\n// Log the updated array for debugging (optional)\nnode.warn(`Updated all_power_measure_id: ${JSON.stringify(allPowerMeasureIds)}`);\n\n// Pass through the message for further processing\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 560,
        "wires": [
            [
                "b0fe93bafaeabdf8"
            ]
        ]
    },
    {
        "id": "0d4c44b815a8faab",
        "type": "sqlitedb",
        "db": "D:\\_0_DEV_SOFTWARE\\PIO_ESPIDF\\UPS_TESTER_PROJECT\\powerGuard\\db\\test_reports.db",
        "mode": "RWC"
    }
]