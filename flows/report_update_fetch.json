[
    {
        "id": "4ec0a7f75863202f",
        "type": "tab",
        "label": "REPORT_UPDATE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b89c21b9c5642159",
        "type": "link in",
        "z": "4ec0a7f75863202f",
        "name": "REPORT_IN",
        "links": [
            "bb5af27275e2ee33"
        ],
        "x": 35,
        "y": 120,
        "wires": [
            [
                "d45672f67dbbab27",
                "24687e8eaa6997ca",
                "ac7df2e2275af626"
            ]
        ]
    },
    {
        "id": "83e451fc86ef20c7",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "SIMULATE REPORT",
        "func": "// Creating the payload based on the provided structure\nlet payload = {\n    \"settings\": {\n        \"id\": 4,\n        \"report_id\": 34300381,\n        \"standard\": \"IEC_62040_1\",\n        \"ups_model\": \"UVA-123\",\n        \"client_name\": \"Walton\",\n        \"brand_name\": \"Walton\",\n        \"test_engineer_name\": \"Engr Atik\",\n        \"test_approval_name\": \"Engr Jhon\",\n        \"spec_id\": 4\n    },\n    \"test_name\": \"BackupTest\",\n    \"test_description\": \"Backup Test Report\",\n    \"subreport_id\": 3430038190,\n    \"measurements\": [\n        {\n            \"m_unique_id\": 6804338082,\n            \"time_stamp\": 1735741904962,\n            \"name\": \"Measurement Backup test\",\n            \"mode\": \"NORMAL_MODE\",\n            \"phase_name\": \"Phase A\",\n            \"load_type\": \"LINEAR\",\n            \"step_id\": 0,\n            \"load_percentage\": 6,\n            \"power_measures\": [\n                {\n                    \"type\": \"UPS_INPUT\",\n                    \"voltage\": 0,\n                    \"current\": 0,\n                    \"power\": 0,\n                    \"energy\": 0,\n                    \"pf\": 0,\n                    \"frequency\": 0\n                },\n                {\n                    \"type\": \"UPS_OUTPUT\",\n                    \"voltage\": 0,\n                    \"current\": 0,\n                    \"power\": 0,\n                    \"energy\": 0,\n                    \"pf\": 0,\n                    \"frequency\": 0\n                }\n            ],\n            \"steady_state_voltage_tol\": 0,\n            \"voltage_dc_component\": 0,\n            \"load_pf_deviation\": 0,\n            \"switch_time_ms\": 0,\n            \"run_interval_sec\": 10,\n            \"backup_time_sec\": 0,\n            \"overload_time_sec\": 0,\n            \"temperature_1\": 0,\n            \"temperature_2\": 0\n        },\n        {\n            \"m_unique_id\": 7908496175,\n            \"time_stamp\": 1735741923950,\n            \"name\": \"Measurement Backup test\",\n            \"mode\": \"NORMAL_MODE\",\n            \"phase_name\": \"Phase A\",\n            \"load_type\": \"LINEAR\",\n            \"step_id\": 0,\n            \"load_percentage\": 6,\n            \"power_measures\": [\n                {\n                    \"type\": \"UPS_INPUT\",\n                    \"voltage\": 0,\n                    \"current\": 0,\n                    \"power\": 0,\n                    \"energy\": 0,\n                    \"pf\": 0,\n                    \"frequency\": 0\n                },\n                {\n                    \"type\": \"UPS_OUTPUT\",\n                    \"voltage\": 0,\n                    \"current\": 0,\n                    \"power\": 0,\n                    \"energy\": 0,\n                    \"pf\": 0,\n                    \"frequency\": 0\n                }\n            ],\n            \"steady_state_voltage_tol\": 0,\n            \"voltage_dc_component\": 0,\n            \"load_pf_deviation\": 0,\n            \"switch_time_ms\": 0,\n            \"run_interval_sec\": 10,\n            \"backup_time_sec\": 0,\n            \"overload_time_sec\": 0,\n            \"temperature_1\": 0,\n            \"temperature_2\": 0\n        }\n    ],\n    \"test_result\": \"USER_OBSERVATION\"\n};\n\n// Output the payload for the next node in the flow\nmsg.payload = payload;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 40,
        "wires": [
            [
                "d45672f67dbbab27",
                "ac7df2e2275af626",
                "24687e8eaa6997ca"
            ]
        ]
    },
    {
        "id": "d45672f67dbbab27",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "SORT_REPORT",
        "func": "let payload = msg.payload;\nlet all_subtest_report=flow.get(\"all_subtest_report\")||[];\n// Extract Measurements Array\nlet measurements = payload.measurements;\n\n// Extract Remaining Data and Combine Settings with Other Data\nlet { settings, measurements: _, ...otherData } = payload;\nlet rest_report = { settings, ...otherData };\n\n// Extract all measurement IDs\nlet measurement_ids = measurements.map(measurement => measurement.m_unique_id);\n\n// Store the measurement_ids array in flow context\nflow.set(\"measurement_ids\", measurement_ids);\nall_subtest_report.push(payload);\nflow.set(\"all_subtest_report\", all_subtest_report);\n\n// Prepare Outputs\nconst output = [\n    { payload: measurements }, // Output 1: Measurements Array\n    { payload: rest_report }   // Output 2: Combined Rest Report\n];\n\n// Send Result\nreturn output;\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 120,
        "wires": [
            [
                "ed0573ddae590b22"
            ],
            [
                "754de0d72315e873",
                "ef1c0aa150a88ea5"
            ]
        ]
    },
    {
        "id": "112848acd093c60f",
        "type": "inject",
        "z": "4ec0a7f75863202f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 40,
        "wires": [
            [
                "83e451fc86ef20c7"
            ]
        ]
    },
    {
        "id": "ac7df2e2275af626",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "PROCESS MEASUREMENTS",
        "func": "\nfunction delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n  const allPowerData = [];\n// Asynchronous function to process measurements\nasync function processMeasurements(measurements, send, done) {\n    // Array to hold all power data\n  \n\n    for (let measurement of measurements) {\n        const measurementId = measurement.m_unique_id;\n        const powerMeasures = measurement.power_measures.map(pm => ({\n            ...pm,\n            measurement_id: measurementId\n        }));\n\n        // Create rest_measurement by excluding the power_measures field\n        const { power_measures, ...restMeasurement } = measurement;\n\n        // Iterate over power measures\n        for (let powerMeasure of powerMeasures) {\n            // Add to aggregated power data\n            allPowerData.push(powerMeasure);\n\n            // Send power measure (Output 1)\n            send([\n                { payload: powerMeasure }, \n                null, \n                { payload: false } // Default value for Output 3\n            ]);\n            await delay(1000); // 1-second delay\n        }\n\n        // Send the rest of the measurement (Output 2) only once\n        send([\n            null, \n            { payload: restMeasurement }, \n            { payload: false } // Default value for Output 3\n        ]);\n        await delay(1000); // 1-second delay\n    }\n\n    // Store all power data in flow context\n    flow.set(\"all_power_data\", allPowerData);\n\n    // Send a payload `true` to Output 3 when all processing is done\n    send([null, null, { payload: true }]);\n    done(); // Indicate the function has completed\n}\n\n// Main Function Logic\nlet payload = msg.payload;\n\n// Ensure the input contains measurements\nif (!payload.measurements || !Array.isArray(payload.measurements)) {\n    node.error(\"Invalid input: 'measurements' must be an array.\", msg);\n    return null;\n}\n\n// Start asynchronous processing\nprocessMeasurements(payload.measurements, node.send, () => node.done());\n\n// Return null as the function sends messages asynchronously\nreturn null;\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 320,
        "wires": [
            [],
            [
                "ca8987ad0fbb0784"
            ],
            [
                "bc8e9479fde69e7d",
                "934392df93190d41"
            ]
        ]
    },
    {
        "id": "20450f4f7a43a947",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "insert _power_measures",
        "func": "// Ensure msg.payload contains the necessary data\nif (!msg.payload || typeof msg.payload !== \"object\") {\n    node.error(\"Invalid input: msg.payload must be an object.\");\n    return null;\n}\n\n// Extract powerMeasure object from msg.payload\nvar powerMeasure = msg.payload;\n\n// Validate required fields\nif (\n    powerMeasure.type === undefined ||\n    powerMeasure.voltage === undefined ||\n    powerMeasure.current === undefined ||\n    powerMeasure.power === undefined ||\n    powerMeasure.energy === undefined ||\n    powerMeasure.pf === undefined ||\n    powerMeasure.frequency === undefined ||\n    powerMeasure.measurement_id === undefined\n) {\n    node.error(\"Invalid input: msg.payload must contain all required fields.\");\n    return null;\n}\n\n// Construct the SQL query\nvar topic = `\n    INSERT INTO PowerMeasure (type, voltage, current, power, energy, pf, frequency, measurement_id) \n    VALUES (\n        '${powerMeasure.type}', \n        ${powerMeasure.voltage}, \n        ${powerMeasure.current}, \n        ${powerMeasure.power}, \n        ${powerMeasure.energy}, \n        ${powerMeasure.pf}, \n        ${powerMeasure.frequency}, \n        ${powerMeasure.measurement_id}\n    );\n`;\n\n// Return the query to be executed by the SQLite node\nreturn { topic: topic };\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 840,
        "wires": [
            [
                "519b0cfe351f15ce"
            ]
        ]
    },
    {
        "id": "b0fe93bafaeabdf8",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 840,
        "wires": []
    },
    {
        "id": "519b0cfe351f15ce",
        "type": "sqlite",
        "z": "4ec0a7f75863202f",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 500,
        "y": 840,
        "wires": [
            [
                "712512ae60b1cdc9"
            ]
        ]
    },
    {
        "id": "712512ae60b1cdc9",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "get powermeasure id",
        "func": "msg.topic=\"SELECT last_insert_rowid()\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 840,
        "wires": [
            [
                "16e508bdf889111c"
            ]
        ]
    },
    {
        "id": "16e508bdf889111c",
        "type": "sqlite",
        "z": "4ec0a7f75863202f",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 860,
        "y": 840,
        "wires": [
            [
                "72fb27e46012366a"
            ]
        ]
    },
    {
        "id": "72fb27e46012366a",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "save power measure id",
        "func": "// Ensure msg.payload contains the ID from the query result\nif (!msg.payload || !msg.payload[0] || !msg.payload[0]['last_insert_rowid()']) {\n    node.error(\"Invalid input: msg.payload must contain the result of last_insert_rowid().\");\n    return null;\n}\n\n// Extract the last inserted row ID\nlet lastInsertId = msg.payload[0]['last_insert_rowid()'];\n\n// Retrieve the existing array from flow context or initialize it\nlet allPowerMeasureIds = flow.get(\"all_power_measure_id\") || [];\n\n// Add the new ID to the array\nallPowerMeasureIds.push(lastInsertId);\n\n// Save the updated array back to the flow context\nflow.set(\"all_power_measure_id\", allPowerMeasureIds);\n\n// Log the updated array for debugging (optional)\nnode.warn(`Updated all_power_measure_id: ${JSON.stringify(allPowerMeasureIds)}`);\n\n// Pass through the message for further processing\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 840,
        "wires": [
            [
                "b0fe93bafaeabdf8",
                "a78403635e03631e"
            ]
        ]
    },
    {
        "id": "24687e8eaa6997ca",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "SAVE LINKS",
        "func": "// Get the existing report-m_unique_id mapping from flow context\nlet reportLinks = flow.get(\"reportLinks\") || {};\n\n// Ensure `report_id` is always a number\nconst subreport_id = Number(msg.payload.subreport_id);\nif (isNaN(subreport_id)) {\n    node.error(`Invalid subreport_id in Function 1: ${msg.payload.settings.report_id}`);\n    return null;\n}\n\n// Extract m_unique_id values\nconst measurementIds = msg.payload.measurements.map(measurement => measurement.m_unique_id);\n\n// Add the report_id and associated m_unique_id values\nif (!reportLinks[subreport_id]) {\n    reportLinks[subreport_id] = []; // Initialize if not present\n}\n\n// Avoid duplicates by combining arrays and using Set\nreportLinks[subreport_id] = Array.from(new Set([...reportLinks[subreport_id], ...measurementIds]));\n\n// Save updated reportLinks in flow context\nflow.set(\"reportLinks\", reportLinks);\n\n// Debug: Log the current state of the flow context\nnode.warn(`Report Links Updated (Function 1): ${JSON.stringify(reportLinks, null, 2)}`);\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            [
                "f324b50360a0a3ef"
            ]
        ]
    },
    {
        "id": "f324b50360a0a3ef",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "report link",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 240,
        "wires": []
    },
    {
        "id": "ca8987ad0fbb0784",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "SAVE Measurement with sub report  id",
        "func": "// // Retrieve the reportLinks object from flow context\nlet reportLinks = flow.get(\"reportLinks\") || {};\nnode.warn(`Function 2: Retrieved reportLinks = ${JSON.stringify(reportLinks, null, 2)}`);\n\n// Extract the new measurement from the message payload\nlet new_measurement = msg.payload;\n\n// Validate the measurement ID\nconst measurementId = new_measurement.m_unique_id;\nif (!measurementId) {\n    node.error(\"Invalid measurement_id: undefined\", msg);\n    return null;\n}\n\n// Find the report_id for the given measurementId\nlet foundReportId = null;\nfor (const [id, measurementIds] of Object.entries(reportLinks)) {\n    if (measurementIds.includes(measurementId)) {\n        foundReportId = Number(id); // Ensure report_id is returned as a number\n        break;\n    }\n}\n\n// Update the measurement with the found report_id or log an error\nif (foundReportId) {\n    new_measurement.report_id = foundReportId;\n    msg.payload.subreport_id = foundReportId;\n    node.warn(`Measurement ID ${measurementId} belongs to Report ID ${foundReportId}`);\n} else {\n    msg.payload.error = `Measurement ID ${measurementId} not found in any report.`;\n    node.warn(`Measurement ID ${measurementId} not found.`);\n}\n\n// Retrieve or initialize the all_measurements array in the flow context\nlet all_measurements = flow.get(\"all_measurements\") || [];\n\n// Check for duplicates before adding the new measurement\nlet isDuplicate = all_measurements.some(\n    measurement =>\n        measurement.m_unique_id === new_measurement.m_unique_id &&\n        measurement.subreport_id === new_measurement.subreport_id\n);\n\nif (!isDuplicate) {\n    all_measurements.push(new_measurement);\n    flow.set(\"all_measurements\", all_measurements);\n    node.warn(`Added new measurement: ${JSON.stringify(new_measurement, null, 2)}`);\n} else {\n    node.warn(`Duplicate measurement detected. Skipping addition: ${JSON.stringify(new_measurement, null, 2)}`);\n}\n\n// Return the message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "18826b373af39421",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "INSERT measurement",
        "func": "// Ensure msg.payload contains the necessary data\nif (!msg.payload || typeof msg.payload !== \"object\") {\n    node.error(\"Invalid input: msg.payload must be an object.\");\n    return null;\n}\n\n// Extract measurement object from msg.payload\nvar measurement = msg.payload;\nvar report_id=flow.get(\"latest_report_id\");\n// Validate required fields\nif (\n    measurement.m_unique_id === undefined ||\n    measurement.time_stamp === undefined ||\n    measurement.name === undefined ||\n    measurement.subreport_id === undefined\n) {\n    node.error(\"Invalid input: msg.payload must contain all required fields (m_unique_id, time_stamp, name, subreport_id).\");\n    return null;\n}\n\n// Escape string values to prevent SQL injection\nfunction escapeString(str) {\n    return str.replace(/'/g, \"''\");\n}\n\n// Construct the SQL query with proper handling of null values\nvar topic = `\n    INSERT INTO Measurement (\n        m_unique_id, timestamp, name, mode, phase_name, load_type, step_id, \n        load_percentage, steady_state_voltage_tol, voltage_dc_component, \n        load_pf_deviation, switch_time_ms, run_interval_sec, backup_time_sec, \n        overload_time_sec, temperature_1, temperature_2, test_report_id\n    ) VALUES (\n        ${measurement.m_unique_id}, \n        datetime(${measurement.time_stamp} / 1000, 'unixepoch'), \n        '${escapeString(measurement.name)}', \n        ${measurement.mode ? `'${escapeString(measurement.mode)}'` : 'NULL'}, \n        ${measurement.phase_name ? `'${escapeString(measurement.phase_name)}'` : 'NULL'}, \n        ${measurement.load_type ? `'${escapeString(measurement.load_type)}'` : 'NULL'}, \n        ${measurement.step_id !== undefined ? measurement.step_id : 'NULL'}, \n        ${measurement.load_percentage !== undefined ? measurement.load_percentage : 'NULL'}, \n        ${measurement.steady_state_voltage_tol !== undefined ? measurement.steady_state_voltage_tol : 'NULL'}, \n        ${measurement.voltage_dc_component !== undefined ? measurement.voltage_dc_component : 'NULL'}, \n        ${measurement.load_pf_deviation !== undefined ? measurement.load_pf_deviation : 'NULL'}, \n        ${measurement.switch_time_ms !== undefined ? measurement.switch_time_ms : 'NULL'}, \n        ${measurement.run_interval_sec !== undefined ? measurement.run_interval_sec : 'NULL'}, \n        ${measurement.backup_time_sec !== undefined ? measurement.backup_time_sec : 'NULL'}, \n        ${measurement.overload_time_sec !== undefined ? measurement.overload_time_sec : 'NULL'}, \n        ${measurement.temperature_1 !== undefined ? measurement.temperature_1 : 'NULL'}, \n        ${measurement.temperature_2 !== undefined ? measurement.temperature_2 : 'NULL'}, \n        ${report_id}\n    );\n`;\n\n// Return the query to be executed by the SQLite node\nreturn { topic: topic };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 620,
        "wires": [
            [
                "5f1f3198bcee0d63"
            ]
        ]
    },
    {
        "id": "5f1f3198bcee0d63",
        "type": "sqlite",
        "z": "4ec0a7f75863202f",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 610,
        "y": 620,
        "wires": [
            [
                "0e1b7fd7829d8533"
            ]
        ]
    },
    {
        "id": "0e1b7fd7829d8533",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "get measurement id",
        "func": "msg.topic=\"SELECT last_insert_rowid()\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 620,
        "wires": [
            [
                "cb6be12251a7102f"
            ]
        ]
    },
    {
        "id": "cb6be12251a7102f",
        "type": "sqlite",
        "z": "4ec0a7f75863202f",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 970,
        "y": 620,
        "wires": [
            [
                "1a31d7bd6a90d2d8"
            ]
        ]
    },
    {
        "id": "1a31d7bd6a90d2d8",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "save measurement id",
        "func": "// Ensure msg.payload contains the ID from the query result\nif (!msg.payload || !msg.payload[0] || !msg.payload[0]['last_insert_rowid()']) {\n    node.error(\"Invalid input: msg.payload must contain the result of last_insert_rowid().\");\n    return null;\n}\n\n// Extract the last inserted row ID\nlet lastInsertId = msg.payload[0]['last_insert_rowid()'];\nlet latest_measurement=flow.get(\"latest_measurement\");\nlet all_measurement_in_db=flow.get(\"all_measurement_in_db\")||[];\n\nlet measurement_in_db={\n    m_unique_id:null,\n    m_db_row_id:null,\n}\nmeasurement_in_db.m_unique_id=latest_measurement.m_unique_id;\nmeasurement_in_db.m_db_row_id=lastInsertId;\nall_measurement_in_db.push(measurement_in_db);\nflow.set(\"all_measurement_in_db\",all_measurement_in_db);\nnode.warn(`Updated all_measurement_in_db: ${JSON.stringify(all_measurement_in_db)} where the latest unique id ${latest_measurement.m_unique_id} maps to row id ${lastInsertId}` );\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 620,
        "wires": [
            [
                "35db5fecab113913"
            ]
        ]
    },
    {
        "id": "754de0d72315e873",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "SAVE latest report",
        "func": "let rest_report=msg.payload;\n\n\nlet settings=rest_report.settings;\n\nflow.set(\"latest_subreport_id\",rest_report.subreport_id||0);\nflow.set(\"latest_report\",rest_report);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 140,
        "wires": [
            [
                "5de1707360de3ca3",
                "c3958a34eb8f60eb"
            ]
        ]
    },
    {
        "id": "7126aec203523eaf",
        "type": "change",
        "z": "4ec0a7f75863202f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "latest_subreport_id",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 540,
        "wires": [
            [
                "8234f43a6332c074",
                "d56511342a6aa80d"
            ]
        ]
    },
    {
        "id": "8234f43a6332c074",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "latest_report_id",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 540,
        "wires": []
    },
    {
        "id": "32965671a41e135c",
        "type": "switch",
        "z": "4ec0a7f75863202f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 540,
        "wires": [
            [],
            [
                "7126aec203523eaf"
            ]
        ]
    },
    {
        "id": "d56511342a6aa80d",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "FETCH MEASUREMENTS",
        "func": "// Helper function for delaying execution\nfunction delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Retrieve all measurements from flow context\nlet all_measurements = flow.get(\"all_measurements\") || [];\nlet latest_measurement={};\nnode.warn(`Retrieved all_measurements: ${JSON.stringify(all_measurements, null, 2)}`);\n\n// Get the desired report_id from the incoming message\nlet subreport_id = msg.payload;\nif (subreport_id === undefined || subreport_id === null) {\n    node.error(\"Invalid subreport_id: undefined or null\", msg);\n    return null;\n}\n\n// Filter measurements for the given report_id\nlet filteredMeasurements = all_measurements.filter(m => m.report_id === subreport_id);\n\nif (filteredMeasurements.length === 0) {\n    node.warn(`No measurements found for report_id: ${subreport_id}`);\n    return null;\n}\n\n// Async function to send measurements one by one\nasync function sendMeasurements(measurements, send, done) {\n    for (let measurement of measurements) {\n        send({ payload: measurement }); // Send each measurement\n        flow.set(\"latest_measurement\",measurement);\n        await delay(1000); // 1-second delay between each message\n    }\n    done(); // Indicate processing is complete\n}\n\n// Start sending measurements asynchronously\nsendMeasurements(filteredMeasurements, node.send, () => node.done());\n\n// Return null as the function sends messages asynchronously\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 620,
        "wires": [
            [
                "18826b373af39421"
            ]
        ]
    },
    {
        "id": "bc8e9479fde69e7d",
        "type": "ui-led",
        "z": "4ec0a7f75863202f",
        "name": "DATA Processed",
        "group": "ac18f679c10f1fd0",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "DATA Processed",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "false",
                "valueType": "bool",
                "color": "#ff0000"
            },
            {
                "value": "true",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": true,
        "showGlow": true,
        "x": 1570,
        "y": 340,
        "wires": []
    },
    {
        "id": "934392df93190d41",
        "type": "link out",
        "z": "4ec0a7f75863202f",
        "name": "measurement_process_complete_out",
        "mode": "link",
        "links": [
            "298c4fe9afd4dd9c"
        ],
        "x": 765,
        "y": 380,
        "wires": []
    },
    {
        "id": "35db5fecab113913",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "watch dog",
        "func": "// Get the timestamp of the last update\nlet lastUpdateTime = flow.get(\"last_update_time\") || 0;\n\n// Update the timestamp to the current time\nlet currentTime = Date.now();\nflow.set(\"last_update_time\", currentTime);\n\n// Initialize the watchdog timeout (in milliseconds)\nlet timeoutDuration = 3000; // 3 seconds (adjust as needed)\n\n// Clear any existing timeout\nlet watchdogTimer = flow.get(\"watchdog_timer\");\nif (watchdogTimer) {\n    clearTimeout(watchdogTimer);\n}\n\n// Set a new timeout to check if updates have stopped\nwatchdogTimer = setTimeout(() => {\n    // Check the current timestamp\n    let lastUpdate = flow.get(\"last_update_time\") || 0;\n    let now = Date.now();\n\n    // If no updates occurred within the timeout duration, send a \"true\" payload\n    if (now - lastUpdate >= timeoutDuration) {\n        node.send({ payload: true });\n    }\n}, timeoutDuration);\n\n// Store the new timeout in flow context\nflow.set(\"watchdog_timer\", watchdogTimer);\n\n// Send a \"false\" payload when updates are ongoing\nreturn { payload: false };\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 680,
        "wires": [
            [
                "9e2edbf349151202",
                "59c3b5b515ebf47b"
            ]
        ]
    },
    {
        "id": "9e2edbf349151202",
        "type": "ui-led",
        "z": "4ec0a7f75863202f",
        "name": "DB Measurement",
        "group": "ac18f679c10f1fd0",
        "order": 6,
        "width": 0,
        "height": 0,
        "label": "DB Measurement",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "false",
                "valueType": "bool",
                "color": "#ff0000"
            },
            {
                "value": "true",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": true,
        "showGlow": true,
        "x": 690,
        "y": 680,
        "wires": []
    },
    {
        "id": "964cf7e05606d27a",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "fetch powers",
        "func": "// Retrieve all_power_data from flow context\nconst allPowerData = flow.get(\"all_power_data\");\n\nif (!allPowerData || !Array.isArray(allPowerData)) {\n    node.warn(\"No power data available or data is not an array.\");\n    return null;\n}\n\n// Retrieve all_measurement_in_db from flow context\nconst allMeasurementInDb = flow.get(\"all_measurement_in_db\") || [];\n\n// Function to map m_unique_id to SQLite row ID\nfunction getDbRowIdForUniqueId(m_unique_id) {\n    const measurement = allMeasurementInDb.find(entry => entry.m_unique_id === m_unique_id);\n    return measurement ? measurement.m_db_row_id : null;\n}\n\n// Update all_power_data to replace m_unique_id with m_db_row_id\nfor (let powerData of allPowerData) {\n    if (powerData.measurement_id) {\n        const dbRowId = getDbRowIdForUniqueId(powerData.measurement_id);\n        if (dbRowId !== null) {\n            powerData.measurement_id = dbRowId;\n        } else {\n            node.warn(`No matching database row ID found for m_unique_id: ${powerData.measurement_id}`);\n        }\n    }\n}\n\n// Function to send data one by one with a delay\nasync function sendDataWithDelay(dataArray) {\n    for (const item of dataArray) {\n        node.send({ payload: item }); // Send the data\n        await new Promise(resolve => setTimeout(resolve, 1000)); // 1-second delay\n    }\n}\n\n// Start the async process\nsendDataWithDelay(allPowerData)\n    .then(() => node.done()) // Mark node as done after sending all data\n    .catch(err => node.error(\"Error sending data: \" + err));\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 840,
        "wires": [
            [
                "20450f4f7a43a947"
            ]
        ]
    },
    {
        "id": "a78403635e03631e",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "watch dog",
        "func": "// Get the timestamp of the last update\nlet lastUpdateTime = flow.get(\"last_update_time\") || 0;\n\n// Update the timestamp to the current time\nlet currentTime = Date.now();\nflow.set(\"last_update_time\", currentTime);\n\n// Initialize the watchdog timeout (in milliseconds)\nlet timeoutDuration = 3000; // 3 seconds (adjust as needed)\n\n// Clear any existing timeout\nlet watchdogTimer = flow.get(\"watchdog_timer\");\nif (watchdogTimer) {\n    clearTimeout(watchdogTimer);\n}\n\n// Set a new timeout to check if updates have stopped\nwatchdogTimer = setTimeout(() => {\n    // Check the current timestamp\n    let lastUpdate = flow.get(\"last_update_time\") || 0;\n    let now = Date.now();\n\n    // If no updates occurred within the timeout duration, send a \"true\" payload\n    if (now - lastUpdate >= timeoutDuration) {\n        node.send({ payload: true });\n    }\n}, timeoutDuration);\n\n// Store the new timeout in flow context\nflow.set(\"watchdog_timer\", watchdogTimer);\n\n// Send a \"false\" payload when updates are ongoing\nreturn { payload: false };\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 900,
        "wires": [
            [
                "c7407683108bb297",
                "66805343908213ee"
            ]
        ]
    },
    {
        "id": "c7407683108bb297",
        "type": "ui-led",
        "z": "4ec0a7f75863202f",
        "name": "DB Power",
        "group": "ac18f679c10f1fd0",
        "order": 7,
        "width": 0,
        "height": 0,
        "label": "DB Powers",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "false",
                "valueType": "bool",
                "color": "#ff0000"
            },
            {
                "value": "true",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": true,
        "showGlow": true,
        "x": 1380,
        "y": 900,
        "wires": []
    },
    {
        "id": "59c3b5b515ebf47b",
        "type": "switch",
        "z": "4ec0a7f75863202f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 760,
        "wires": [
            [],
            [
                "964cf7e05606d27a"
            ]
        ]
    },
    {
        "id": "417ec4018e3df706",
        "type": "link in",
        "z": "4ec0a7f75863202f",
        "name": "backup_test_reset_in",
        "links": [
            "62eb936d918d3302"
        ],
        "x": 1445,
        "y": 400,
        "wires": [
            [
                "bc8e9479fde69e7d"
            ]
        ]
    },
    {
        "id": "2498d1acf7fb0c00",
        "type": "link in",
        "z": "4ec0a7f75863202f",
        "name": "backup_test_reset_in2",
        "links": [
            "62eb936d918d3302"
        ],
        "x": 355,
        "y": 760,
        "wires": [
            [
                "9e2edbf349151202"
            ]
        ]
    },
    {
        "id": "3bb33a88dfacf747",
        "type": "link in",
        "z": "4ec0a7f75863202f",
        "name": "backup_test_reset3",
        "links": [
            "62eb936d918d3302"
        ],
        "x": 1205,
        "y": 980,
        "wires": [
            [
                "c7407683108bb297"
            ]
        ]
    },
    {
        "id": "5de1707360de3ca3",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "report",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 140,
        "wires": []
    },
    {
        "id": "ed0573ddae590b22",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "measurements",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 100,
        "wires": []
    },
    {
        "id": "ef1c0aa150a88ea5",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 180,
        "wires": []
    },
    {
        "id": "66805343908213ee",
        "type": "switch",
        "z": "4ec0a7f75863202f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 960,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "078d2e820b431c10",
        "type": "ui-template",
        "z": "4ec0a7f75863202f",
        "group": "6cbfb51b0595d4e8",
        "page": "",
        "ui": "",
        "name": "Report_Fecther",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div>\n        <!-- Report Selection Dropdown -->\n        <div class=\"report-selector\">\n            <label for=\"report-id\">Select Report:</label>\n            <select id=\"report-id\" v-model=\"formData.report.id\" @change=\"onReportChange\">\n                <option value=\"\" disabled>Select a Report</option>\n                <option v-for=\"id in reportOptions\" :key=\"id\" :value=\"id\">\n                    Report {{ id }}\n                </option>\n            </select>\n        </div>\n\n        <!-- Loading State -->\n        <div v-if=\"isLoading\" class=\"loading-container\">\n            Loading report data...\n        </div>\n\n        <!-- Error or No Data -->\n        <div v-else-if=\"!currentSelectedReport\" class=\"error-container\">\n            <p>No report selected or available. Please select a valid report.</p>\n        </div>\n\n        <!-- Test Report Details -->\n        <div v-else class=\"test-report-container\">\n            <!-- Common Test Information -->\n            <div class=\"common-info\">\n                <h2>{{ currentSelectedReport.test_name }}</h2>\n                <p><strong>Description:</strong> {{ currentSelectedReport.test_description }}</p>\n                <p><strong>Test Result:</strong> {{ currentSelectedReport.test_result }}</p>\n                <p><strong>Client Name:</strong> {{ currentSelectedReport.settings.client_name }}</p>\n                <p><strong>Standard:</strong> {{ currentSelectedReport.settings.standard }}</p>\n                <p><strong>UPS Model:</strong> {{ currentSelectedReport.settings.ups_model }}</p>\n            </div>\n\n            <!-- Common Measurement Information -->\n            <div class=\"measurement-common-info\">\n                <h3>Measurement Overview</h3>\n                <p><strong>Load Type:</strong> {{ measurementCommonData.load_type || \"N/A\" }}</p>\n                <p><strong>Load Percentage:</strong> {{ measurementCommonData.load_percentage || 0 }}</p>\n                <p><strong>Run Interval (s):</strong> {{ measurementCommonData.run_interval_sec || 0 }}</p>\n                <p><strong>Phase Name:</strong> {{ measurementCommonData.phase_name || \"Unknown\" }}</p>\n                <p><strong>Step ID:</strong> {{ measurementCommonData.step_id || \"N/A\" }}</p>\n            </div>\n\n            <!-- Measurement Table -->\n            <!-- Measurement Table -->\n            <div class=\"measurement-table-container\"\n                v-if=\"currentSelectedReport && currentSelectedReport.measurements.length\">\n                <h3>Measurements Table</h3>\n                <table class=\"measurement-table\">\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Measurement Name</th>\n                            <th>Type</th>\n                            <th>Voltage (V)</th>\n                            <th>Current (A)</th>\n                            <th>Power (W)</th>\n                            <th>Energy (kWh)</th>\n                            <th>Power Factor</th>\n                            <th>Frequency (Hz)</th>\n                            <th>Backup Time (s)</th>\n                            <th>Load Percentage</th>\n                            <th>Phase Name</th>\n                            <th>Step ID</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <template v-for=\"(measurement, index) in currentSelectedReport.measurements\"\n                            :key=\"measurement.m_unique_id\">\n                            <tr>\n                                <!-- Display the first power measure -->\n                                <td :rowspan=\"measurement.power_measures.length\">{{ index + 1 }}</td>\n                                <td :rowspan=\"measurement.power_measures.length\">{{ measurement.name }}</td>\n                                <td>{{ measurement.power_measures[0].type }}</td>\n                                <td>{{ measurement.power_measures[0].voltage }}</td>\n                                <td>{{ measurement.power_measures[0].current }}</td>\n                                <td>{{ measurement.power_measures[0].power }}</td>\n                                <td>{{ measurement.power_measures[0].energy }}</td>\n                                <td>{{ measurement.power_measures[0].pf }}</td>\n                                <td>{{ measurement.power_measures[0].frequency }}</td>\n                                <td :rowspan=\"measurement.power_measures.length\">{{ measurement.backup_time_sec }}</td>\n                                <td :rowspan=\"measurement.power_measures.length\">{{ measurement.load_percentage }}</td>\n                                <td :rowspan=\"measurement.power_measures.length\">{{ measurement.phase_name }}</td>\n                                <td :rowspan=\"measurement.power_measures.length\">{{ measurement.step_id }}</td>\n                            </tr>\n                            <!-- Additional rows for remaining power measures -->\n                            <tr v-for=\"(powerMeasure, pmIndex) in measurement.power_measures.slice(1)\"\n                                :key=\"measurement.m_unique_id + '-' + pmIndex\">\n                                <td>{{ powerMeasure.type }}</td>\n                                <td>{{ powerMeasure.voltage }}</td>\n                                <td>{{ powerMeasure.current }}</td>\n                                <td>{{ powerMeasure.power }}</td>\n                                <td>{{ powerMeasure.energy }}</td>\n                                <td>{{ powerMeasure.pf }}</td>\n                                <td>{{ powerMeasure.frequency }}</td>\n                            </tr>\n                        </template>\n                    </tbody>\n                </table>\n            </div>\n\n            <!-- Error Handling -->\n            <div v-else class=\"error-container\">\n                <p>No measurements available for the selected report.</p>\n            </div>\n\n\n        </div>\n    </div>\n</template>\n\n\n\n<script>\nexport default {\n    props: {\n        selectedReport: {\n            type: Object,\n            required: false, // Optional, now handled via computed property\n        },\n    },\n    data: function () {\n        return {\n            reports: [], // Holds full report data\n            reportIDs: [], // Holds the list of report IDs (DB row IDs)\n\n            formData: {\n                report: {\n                    id: null, // Selected report ID (DB row ID)\n                },\n            },\n            isLoading: false,\n            responseTimeout: 10000, // Timeout for waiting for DB response in ms\n        };\n    },\n    computed: {\n        // Dropdown options (based on DB row IDs)\n        reportOptions() {\n            return this.reportIDs.sort((a, b) => a - b); // Sort IDs numerically\n        },\n\n\n        currentSelectedReport() {\n            return this.reports.find(\n                (report) => report.id === this.formData.report.id\n            ) || null;\n        },\n        measurementCommonData() {\n            if (!this.currentSelectedReport || !this.currentSelectedReport.measurements.length) {\n                return {};\n            }\n\n            const firstMeasurement = this.currentSelectedReport.measurements[0];\n            return {\n                load_type: firstMeasurement.load_type,\n                load_percentage: firstMeasurement.load_percentage,\n                run_interval_sec: firstMeasurement.run_interval_sec,\n                phase_name: firstMeasurement.phase_name,\n                step_id: firstMeasurement.step_id,\n            };\n        },\n    },\n    methods: {\n\n        onReportChange() {\n            if (!this.formData.report.id) return;\n\n            this.isLoading = true;\n            this.fetchReport()\n                .then(() => (this.isLoading = false))\n                .catch((error) => {\n                    console.error(\"Error fetching report:\", error);\n                    this.isLoading = false;\n                });\n        },\n\n\n        // Update all report IDs from incoming data\n        updateAllReportID(payload) {\n            if (Array.isArray(payload)) {\n                this.reportIDs = payload; // Populate the dropdown with DB row IDs\n            } else {\n                console.error(\"Invalid payload format for report IDs. Expected an array.\");\n            }\n        },\n\n        // Update or add a report in the `reports` array\n        updateAllReport(payload) {\n            if (payload && payload.test_report_id) {\n                const report = {\n                    id: payload.test_report_id, // Use the DB row ID as `id`\n                    subreport_id: payload.sub_report_id, // Keep subreport_id separate\n                    test_name: payload.test_name,\n                    test_description: payload.test_description,\n                    test_result: payload.test_result,\n                    settings: payload.settings,\n                    measurements: payload.measurements,\n                };\n\n                // Find index of the report with the same DB row ID\n                const index = this.reports.findIndex((r) => r.id === report.id);\n                if (index >= 0) {\n                    this.$set(this.reports, index, report); // Update existing report\n                } else {\n                    this.reports.push(report); // Add new report\n                }\n\n                // Log update\n                this.send({\n                    topic: \"info\",\n                    payload: `Report updated: ${report.id}`,\n                });\n            } else {\n                console.error(\"Invalid payload format for reports.\");\n                this.send({\n                    topic: \"error\",\n                    payload: \"Invalid payload format for reports.\",\n                });\n            }\n        },\n\n        // Wait for the database response\n        waitForResponse() {\n            return new Promise((resolve, reject) => {\n                const timeout = setTimeout(() => {\n                    reject(new Error(\"Timeout while waiting for database response.\"));\n                }, this.responseTimeout);\n\n                this.$watch(\n                    \"msg\",\n                    function (newMsg) {\n                        if (newMsg && newMsg.topic === \"db_reply\") {\n                            clearTimeout(timeout);\n                            resolve(newMsg);\n                        }\n                    },\n                    { immediate: false, deep: true }\n                );\n            });\n        },\n\n        // Fetch the selected report from the database\n        async fetchReport() {\n            const selectedId = this.formData.report.id;\n\n            if (!selectedId) {\n                console.error(\"No Report ID selected.\");\n                this.send({\n                    topic: \"error\",\n                    payload: \"No Report ID selected.\",\n                });\n                return;\n            }\n\n            this.send({\n                topic: \"info\",\n                payload: `Fetching test report for report ID: ${selectedId}`,\n            });\n\n            const query = `\n                SELECT \n                    TestReport.id AS test_report_id, -- Row ID\n                    TestReport.sub_report_id, -- Subreport ID\n                    TestReport.test_name,\n                    TestReport.test_description,\n                    TestReport.test_result,\n                    ReportSettings.client_name,\n                    ReportSettings.standard,\n                    ReportSettings.ups_model,\n                    Measurement.m_unique_id AS measurement_unique_id,\n                    Measurement.name AS measurement_name,\n                    Measurement.timestamp AS measurement_timestamp,\n                    Measurement.mode AS mode,\n                    Measurement.phase_name AS phase_name,\n                    Measurement.load_type AS load_type,\n                    Measurement.load_percentage AS load_percentage,\n                    Measurement.step_id AS step_id,\n                    Measurement.run_interval_sec AS run_interval_sec,\n                    Measurement.backup_time_sec AS backup_time_sec,\n                    PowerMeasure.type AS power_measure_type,\n                    PowerMeasure.voltage AS power_measure_voltage,\n                    PowerMeasure.current AS power_measure_current,\n                    PowerMeasure.power AS power_measure_power,\n                    PowerMeasure.energy AS power_measure_energy,\n                    PowerMeasure.pf AS power_measure_pf,\n                    PowerMeasure.frequency AS power_measure_frequency\n                FROM TestReport\n                JOIN ReportSettings ON TestReport.settings_id = ReportSettings.id\n                LEFT JOIN Measurement ON Measurement.test_report_id = TestReport.id\n                LEFT JOIN PowerMeasure ON PowerMeasure.measurement_id = Measurement.id\n                WHERE TestReport.id = '${selectedId}'\n                ORDER BY Measurement.id, PowerMeasure.id\n            `;\n\n            this.send({ topic: query });\n\n            try {\n                const result = await this.waitForResponse();\n                if (result && result.payload) {\n                    this.updateAllReport(result.payload);\n                } else {\n                    console.error(\"Failed to fetch report data or no data returned.\");\n                    this.send({\n                        topic: \"error\",\n                        payload: \"Failed to fetch report data.\",\n                    });\n                }\n            } catch (err) {\n                console.error(\"Error while fetching report:\", err);\n                this.send({\n                    topic: \"error\",\n                    payload: `Error while fetching report: ${err.message}`,\n                });\n            }\n        },\n    },\n    mounted() {\n        this.$watch(\n            \"msg\",\n            function (newMsg) {\n                if (newMsg && newMsg.payload) {\n                    if (Array.isArray(newMsg.payload)) {\n                        this.updateAllReportID(newMsg.payload); // Update report IDs\n                    }\n                }\n            },\n            { deep: true }\n        );\n    },\n};\n</script>\n\n\n\n<style scoped>\n.test-report-container {\n    padding: 20px;\n    background-color: #f9f9f9;\n    border-radius: 10px;\n    max-width: 1000px;\n    margin: auto;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n    font-family: Arial, sans-serif;\n}\n\n.common-info,\n.measurement-common-info {\n    margin-bottom: 20px;\n}\n\n.common-info h2 {\n    font-size: 1.8rem;\n    color: #333;\n}\n\n.common-info p,\n.measurement-common-info p {\n    font-size: 1rem;\n    color: #555;\n    margin: 5px 0;\n}\n\n.measurement-table-container {\n    margin-top: 20px;\n}\n\n.measurement-table {\n    width: 100%;\n    border-collapse: collapse;\n}\n\n.measurement-table th,\n.measurement-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: center;\n}\n\n.measurement-table th {\n    background-color: #007bff;\n    color: white;\n    font-weight: bold;\n}\n\n.measurement-table tbody tr:nth-child(even) {\n    background-color: #f2f2f2;\n}\n\n.measurement-table tbody tr:hover {\n    background-color: #e8f8ff;\n}\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 240,
        "y": 1240,
        "wires": [
            [
                "a94b58aed9ff8449"
            ]
        ]
    },
    {
        "id": "0adeda0e8d03c856",
        "type": "change",
        "z": "4ec0a7f75863202f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "all_test_report_id",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 1120,
        "wires": [
            [
                "078d2e820b431c10"
            ]
        ]
    },
    {
        "id": "fd24e94f42ac799b",
        "type": "inject",
        "z": "4ec0a7f75863202f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1120,
        "wires": [
            [
                "0adeda0e8d03c856"
            ]
        ]
    },
    {
        "id": "7f984f4f04961b2a",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "TEST",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1240,
        "wires": []
    },
    {
        "id": "d9fba69ae6bd9b9b",
        "type": "sqlite",
        "z": "4ec0a7f75863202f",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 600,
        "y": 1260,
        "wires": [
            [
                "7f984f4f04961b2a",
                "c5a219b7e3f53b61"
            ]
        ]
    },
    {
        "id": "b98027221b4ee26e",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "INFO",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1200,
        "wires": []
    },
    {
        "id": "a94b58aed9ff8449",
        "type": "switch",
        "z": "4ec0a7f75863202f",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "info",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 410,
        "y": 1240,
        "wires": [
            [
                "b98027221b4ee26e"
            ],
            [
                "d8c8c5b8ecadc2c6"
            ],
            [
                "d9fba69ae6bd9b9b"
            ]
        ]
    },
    {
        "id": "d8c8c5b8ecadc2c6",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1200,
        "wires": []
    },
    {
        "id": "8377d01d949c7ab9",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "fetch and insert_rest report",
        "func": "\n// Extract the rest_report object from msg.payload\nlet rest_report = flow.get(\"latest_report\");\n\n// Validate required fields\nif (\n    !rest_report.settings ||\n    !rest_report.test_name ||\n    typeof rest_report.test_name !== \"string\"\n) {\n    node.error(\"Invalid input: rest_report must contain 'settings' and 'test_name'.\");\n    return null;\n}\n\n// Optional fields\nlet test_description = rest_report.test_description || null;\nlet test_result = rest_report.test_result || null;\n\n// Construct the SQL query\nlet topic = `\n    INSERT INTO TestReport (settings_id,sub_report_id, test_name, test_description, test_result)\n    VALUES (\n        ${rest_report.settings.id}, \n        ${rest_report.subreport_id}, \n        '${rest_report.test_name.replace(/'/g, \"''\")}', \n        ${test_description ? `'${test_description.replace(/'/g, \"''\")}'` : \"NULL\"},\n        ${test_result ? `'${test_result.replace(/'/g, \"''\")}'` : \"NULL\"}\n    );\n`;\n\n// Return the query to be executed by the SQLite node\nreturn { topic: topic };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "5502c5c79a1b0122"
            ]
        ]
    },
    {
        "id": "5502c5c79a1b0122",
        "type": "sqlite",
        "z": "4ec0a7f75863202f",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 560,
        "y": 420,
        "wires": [
            [
                "2efcccf1b6ca503a"
            ]
        ]
    },
    {
        "id": "2efcccf1b6ca503a",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "get report id",
        "func": "msg.topic=\"SELECT last_insert_rowid()\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 420,
        "wires": [
            [
                "712f1790b2209428"
            ]
        ]
    },
    {
        "id": "712f1790b2209428",
        "type": "sqlite",
        "z": "4ec0a7f75863202f",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 880,
        "y": 420,
        "wires": [
            [
                "751ce3614ab124c4"
            ]
        ]
    },
    {
        "id": "751ce3614ab124c4",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "save test report",
        "func": "// Ensure msg.payload contains the ID from the query result\nif (!msg.payload || !msg.payload[0] || !msg.payload[0]['last_insert_rowid()']) {\n    node.error(\"Invalid input: msg.payload must contain the result of last_insert_rowid().\");\n    return null;\n}\n\n// Extract the last inserted row ID\nlet lastInsertId = msg.payload[0]['last_insert_rowid()'];\n\n// Retrieve the existing array from flow context or initialize it\nlet allTestReportIds = flow.get(\"all_test_report_id\") || [];\n\n// Add the new ID to the array\nallTestReportIds.push(lastInsertId);\n\n// Save the updated array back to the flow context\nflow.set(\"all_test_report_id\", allTestReportIds);\nflow.set(\"latest_report_id\", lastInsertId);\n// Log the updated array for debugging (optional)\nnode.warn(`Updated all_test_report_id: ${JSON.stringify(allTestReportIds)}`);\n\n// Pass through the message for further processing\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 420,
        "wires": [
            [
                "29bfe566133d163a"
            ]
        ]
    },
    {
        "id": "29bfe566133d163a",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "watch dog",
        "func": "// Get the timestamp of the last update\nlet lastUpdateTime = flow.get(\"last_update_time\") || 0;\n\n// Update the timestamp to the current time\nlet currentTime = Date.now();\nflow.set(\"last_update_time\", currentTime);\n\n// Initialize the watchdog timeout (in milliseconds)\nlet timeoutDuration = 1000; // 3 seconds (adjust as needed)\n\n// Clear any existing timeout\nlet watchdogTimer = flow.get(\"watchdog_timer\");\nif (watchdogTimer) {\n    clearTimeout(watchdogTimer);\n}\n\n// Set a new timeout to check if updates have stopped\nwatchdogTimer = setTimeout(() => {\n    // Check the current timestamp\n    let lastUpdate = flow.get(\"last_update_time\") || 0;\n    let now = Date.now();\n\n    // If no updates occurred within the timeout duration, send a \"true\" payload\n    if (now - lastUpdate >= timeoutDuration) {\n        node.send({ payload: true });\n    }\n}, timeoutDuration);\n\n// Store the new timeout in flow context\nflow.set(\"watchdog_timer\", watchdogTimer);\n\n// Send a \"false\" payload when updates are ongoing\nreturn { payload: false };\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 420,
        "wires": [
            [
                "9e8152aa906f4172"
            ]
        ]
    },
    {
        "id": "9e8152aa906f4172",
        "type": "ui-led",
        "z": "4ec0a7f75863202f",
        "name": "DB REPORT",
        "group": "ac18f679c10f1fd0",
        "order": 8,
        "width": 0,
        "height": 0,
        "label": "DB REPORT",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "false",
                "valueType": "bool",
                "color": "#ff0000"
            },
            {
                "value": "true",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": true,
        "showGlow": true,
        "x": 1430,
        "y": 480,
        "wires": []
    },
    {
        "id": "8ee437ef429d2d93",
        "type": "link in",
        "z": "4ec0a7f75863202f",
        "name": "backup_test_reset_in1",
        "links": [
            "62eb936d918d3302"
        ],
        "x": 1285,
        "y": 540,
        "wires": [
            [
                "9e8152aa906f4172"
            ]
        ]
    },
    {
        "id": "298c4fe9afd4dd9c",
        "type": "link in",
        "z": "4ec0a7f75863202f",
        "name": "measurement_insert_in",
        "links": [
            "934392df93190d41"
        ],
        "x": 75,
        "y": 540,
        "wires": [
            [
                "32965671a41e135c"
            ]
        ]
    },
    {
        "id": "c3958a34eb8f60eb",
        "type": "link out",
        "z": "4ec0a7f75863202f",
        "name": "latest_report_saved",
        "mode": "link",
        "links": [
            "0b7afe0f4e1071f3"
        ],
        "x": 1185,
        "y": 180,
        "wires": []
    },
    {
        "id": "0b7afe0f4e1071f3",
        "type": "link in",
        "z": "4ec0a7f75863202f",
        "name": "test_report_insert_in",
        "links": [
            "c3958a34eb8f60eb"
        ],
        "x": 45,
        "y": 420,
        "wires": [
            [
                "8377d01d949c7ab9"
            ]
        ]
    },
    {
        "id": "940311875c599d23",
        "type": "rbe",
        "z": "4ec0a7f75863202f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 150,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "c5a219b7e3f53b61",
        "type": "function",
        "z": "4ec0a7f75863202f",
        "name": "Process Db repy",
        "func": "function processReportData(msg) {\n    const payload = msg.payload;\n\n    // Validate payload\n    if (!Array.isArray(payload) || payload.length === 0) {\n        console.error(\"Invalid or empty payload received.\");\n        return null;\n    }\n\n    // Extract common report details from the first entry\n    const firstEntry = payload[0];\n    const report = {\n        test_report_id:firstEntry.test_report_id,\n        settings: {\n            client_name: firstEntry.client_name,\n            standard: firstEntry.standard,\n            ups_model: firstEntry.ups_model,\n        },\n        subreport_id: firstEntry.sub_report_id,\n        test_name: firstEntry.test_name,\n        test_description: firstEntry.test_description,\n        test_result: firstEntry.test_result,\n        measurements: [],\n    };\n\n    // Group data by measurement_unique_id\n    const measurementMap = new Map();\n\n    payload.forEach(entry => {\n        const measurementId = entry.measurement_unique_id;\n\n        // Check if measurement already exists\n        if (!measurementMap.has(measurementId)) {\n            measurementMap.set(measurementId, {\n                m_unique_id: measurementId,\n                time_stamp: new Date(entry.measurement_timestamp).getTime(),\n                name: entry.measurement_name,\n                mode: entry.mode,\n                phase_name: entry.phase_name,\n                load_type: entry.load_type,\n                step_id: entry.step_id,\n                load_percentage: entry.load_percentage,\n                power_measures: [],\n                steady_state_voltage_tol: null, // Placeholder\n                voltage_dc_component: null, // Placeholder\n                load_pf_deviation: null, // Placeholder\n                switch_time_ms: null, // Placeholder\n                run_interval_sec: entry.run_interval_sec,\n                backup_time_sec: entry.backup_time_sec,\n                overload_time_sec: null, // Placeholder\n                temperature_1: null, // Placeholder\n                temperature_2: null, // Placeholder\n            });\n        }\n\n        // Add PowerMeasure to the appropriate measurement\n        const powerMeasure = {\n            type: entry.power_measure_type,\n            voltage: entry.power_measure_voltage,\n            current: entry.power_measure_current,\n            power: entry.power_measure_power,\n            energy: entry.power_measure_energy,\n            pf: entry.power_measure_pf,\n            frequency: entry.power_measure_frequency,\n        };\n\n        measurementMap.get(measurementId).power_measures.push(powerMeasure);\n    });\n\n    // Convert measurementMap to an array and assign to report\n    report.measurements = Array.from(measurementMap.values());\n\n    return report;\n}\n\n\n\nconst transformedReport = processReportData(msg);\nmsg.topic=\"db_reply\";\nmsg.payload=transformedReport;\n\nnode.warn(JSON.stringify(transformedReport, null, 2));\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1300,
        "wires": [
            [
                "61ee3f812080ce79",
                "078d2e820b431c10"
            ]
        ]
    },
    {
        "id": "61ee3f812080ce79",
        "type": "debug",
        "z": "4ec0a7f75863202f",
        "name": "DB REPLY",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 970,
        "y": 1300,
        "wires": []
    },
    {
        "id": "0d4c44b815a8faab",
        "type": "sqlitedb",
        "db": "D:\\_0_DEV_SOFTWARE\\PIO_ESPIDF\\UPS_TESTER_PROJECT\\powerGuard\\db\\test_reports.db",
        "mode": "RWC"
    },
    {
        "id": "ac18f679c10f1fd0",
        "type": "ui-group",
        "name": "UPS_STATUS",
        "page": "7d0f53039d1540b1",
        "width": 3,
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "6cbfb51b0595d4e8",
        "type": "ui-group",
        "name": "Report Query",
        "page": "8b126045e889c889",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "7d0f53039d1540b1",
        "type": "ui-page",
        "name": "BACKUP_TEST",
        "ui": "6bb6879aa70631ea",
        "path": "/backup_test",
        "icon": "battery-clock",
        "layout": "grid",
        "theme": "f51f9a07212ff54b",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "8b126045e889c889",
        "type": "ui-page",
        "name": "TestReport",
        "ui": "6bb6879aa70631ea",
        "path": "/report",
        "icon": "home",
        "layout": "grid",
        "theme": "f51f9a07212ff54b",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "6bb6879aa70631ea",
        "type": "ui-base",
        "name": "UPS Tester",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "showPageTitle": true,
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": "1",
        "showDisconnectNotification": true
    },
    {
        "id": "f51f9a07212ff54b",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#d1479f",
            "primary": "#0094ce",
            "bgPage": "#ededed",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    }
]