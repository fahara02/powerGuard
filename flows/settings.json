[
    {
        "id": "e6613618b3405f10",
        "type": "tab",
        "label": "SETTINGS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b06b941286798352",
        "type": "inject",
        "z": "e6613618b3405f10",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 60,
        "wires": [
            [
                "5d58a652fc68e02d"
            ]
        ]
    },
    {
        "id": "5d58a652fc68e02d",
        "type": "fs-file-lister",
        "z": "e6613618b3405f10",
        "name": "PROTO",
        "start": "src/proto",
        "pattern": "*.proto*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": false,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 360,
        "y": 60,
        "wires": [
            [
                "df71034f668f9cb5"
            ]
        ]
    },
    {
        "id": "df71034f668f9cb5",
        "type": "debug",
        "z": "e6613618b3405f10",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 60,
        "wires": []
    },
    {
        "id": "f8ea56e6ef8f2e3f",
        "type": "encode",
        "z": "e6613618b3405f10",
        "name": "",
        "protofile": "fcaa87c16afbdfcd",
        "protoType": "PowerMeasure",
        "x": 540,
        "y": 560,
        "wires": [
            [
                "e79a3cfe5289963c"
            ]
        ]
    },
    {
        "id": "d7f2f78d77a4908e",
        "type": "debug",
        "z": "e6613618b3405f10",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 580,
        "wires": []
    },
    {
        "id": "dea6212759a9d76b",
        "type": "inject",
        "z": "e6613618b3405f10",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 560,
        "wires": [
            [
                "f5f64a1ecdcb57f7"
            ]
        ]
    },
    {
        "id": "f5f64a1ecdcb57f7",
        "type": "function",
        "z": "e6613618b3405f10",
        "name": "TEST_PROTO",
        "func": "msg.payload = {\n    \"type\": 1,  // 1 corresponds to UPS_OUTPUT in the PowerMeasureType enum\n    \"name\": \"UPS Main Output\",\n    \"voltage\": 230.5,\n    \"current\": 10.2,\n    \"power\": 2354.1,\n    \"pf\": 0.98\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 560,
        "wires": [
            [
                "f8ea56e6ef8f2e3f"
            ]
        ]
    },
    {
        "id": "e79a3cfe5289963c",
        "type": "decode",
        "z": "e6613618b3405f10",
        "name": "",
        "protofile": "fcaa87c16afbdfcd",
        "protoType": "PowerMeasure",
        "x": 720,
        "y": 560,
        "wires": [
            [
                "d7f2f78d77a4908e"
            ]
        ]
    },
    {
        "id": "922ac39b3aa31a7c",
        "type": "inject",
        "z": "e6613618b3405f10",
        "name": "show RECORDS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "SELECT * FROM PowerMeasure ORDER BY id DESC LIMIT 100",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "2ee26788bce0c2dd",
        "type": "ui-template",
        "z": "e6613618b3405f10",
        "group": "785ed2fd62cefc23",
        "page": "",
        "ui": "",
        "name": "REPORT_SETTING",
        "order": 1,
        "width": 4,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div class=\"form-container\">\n      <h2>Report Settings</h2>\n      <form @submit.prevent=\"submitForm\">\n        <!-- Report ID -->\n        <label for=\"report_id\">Report ID:</label>\n        <div class=\"report-id-container\">\n          <input\n            type=\"number\"\n            v-model=\"formData.report_id\"\n            id=\"report_id\"\n            required\n            readonly\n          />\n          <button type=\"button\" @click=\"generateReportID\">Generate</button>\n        </div>\n  \n        <!-- Standard -->\n        <label for=\"standard\">Standard:</label>\n        <select v-model=\"formData.standard\" id=\"standard\" required>\n          <option v-for=\"(value, key) in TestStandard\" :key=\"value\" :value=\"value\">\n            {{ key }}\n          </option>\n        </select>\n  \n        <!-- UPS Model -->\n        <label for=\"ups_model\">UPS Model:</label>\n        <input type=\"text\" v-model=\"formData.ups_model\" id=\"ups_model\" required />\n  \n        <!-- Client Name -->\n        <label for=\"client_name\">Client Name:</label>\n        <input type=\"text\" v-model=\"formData.client_name\" id=\"client_name\" />\n  \n        <!-- Brand Name -->\n        <label for=\"brand_name\">Brand Name:</label>\n        <input type=\"text\" v-model=\"formData.brand_name\" id=\"brand_name\" />\n  \n        <!-- Test Engineer Name -->\n        <label for=\"test_engineer_name\">Test Engineer Name:</label>\n        <input type=\"text\" v-model=\"formData.test_engineer_name\" id=\"test_engineer_name\" />\n  \n        <!-- Test Approval Name -->\n        <label for=\"test_approval_name\">Test Approval Name:</label>\n        <input type=\"text\" v-model=\"formData.test_approval_name\" id=\"test_approval_name\" />\n  \n        <!-- Spec ID Dropdown -->\n        <label for=\"spec_id\">Specification ID:</label>\n        <select v-model=\"formData.spec_id\" id=\"spec_id\" required>\n          <option v-for=\"id in specOptions\" :key=\"id\" :value=\"id\">{{ id }}</option>\n        </select>\n  \n        <!-- Display Spec Data -->\n        <div v-if=\"selectedSpec\">\n          <h3>Spec Details:</h3>\n          <p><strong>Phase:</strong> {{ selectedSpec.phase }}</p>\n          <p><strong>Rated VA:</strong> {{ selectedSpec.rating_va }}</p>\n          <p><strong>Rated Voltage:</strong> {{ selectedSpec.rated_voltage }}</p>\n          <p><strong>Rated Current:</strong> {{ selectedSpec.rated_current }}</p>\n          <p><strong>Power Factor Rated Current:</strong> {{ selectedSpec.pf_rated_current }}</p>\n          <p><strong>Max Continuous Amp:</strong> {{ selectedSpec.max_continous_amp }}</p>\n          <p><strong>Overload Amp:</strong> {{ selectedSpec.overload_amp }}</p>\n          <p><strong>Average Switch Time (ms):</strong> {{ selectedSpec.avg_switch_time_ms }}</p>\n          <p><strong>Average Backup Time (ms):</strong> {{ selectedSpec.avg_backup_time_ms }}</p>\n        </div>\n  \n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        latest_spec_id: 0, // Initial placeholder, dynamically updated\n        spec: [], // Initially empty\n        formData: {\n          report_id: 44042913,\n          standard: \"IEC_62040_1\",\n          ups_model: \"UVA-123\",\n          client_name: 'Walton',\n          brand_name: 'Walton',\n          test_engineer_name: \"Engr Atik\",\n          test_approval_name: \"Engr Jhon\",\n          spec_id: null, // Selected spec_id\n        },\n        TestStandard: {\n        IEC_62040_1: \"IEC_62040_1\",\n        IEC_62040_2: \"IEC_62040_2\",\n        IEC_62040_3: \"IEC_62040_3\",\n        IEC_62040_4: \"IEC_62040_4\",\n        IEC_62040_5: \"IEC_62040_5\",\n      },\n      };\n    },\n    computed: {\n      specOptions() {\n        return this.spec.map((spec) => spec.id).sort((a, b) => a - b);\n      },\n      selectedSpec() {\n        return this.spec.find((spec) => spec.id === this.formData.spec_id) || null;\n      },\n    },\n    methods: {\n      submitForm() {\n        const msg = { payload: this.formData };\n        this.send(msg); // Replace with your submission logic\n      },\n      updateSpecData(payload) {\n        if (payload.latest_spec_id !== undefined) {\n          this.latest_spec_id = payload.latest_spec_id;\n        }\n        if (payload.spec && Array.isArray(payload.spec)) {\n          this.spec = payload.spec;\n        } else {\n          console.error(\"Spec data is not properly formatted:\", payload.spec);\n        }\n  \n        const latestSpec = this.spec.find((spec) => spec.id === this.latest_spec_id - 1);\n        if (!this.formData.spec_id && latestSpec) {\n          this.formData.spec_id = latestSpec.id;\n        }\n      },\n      generateReportID() {\n        this.formData.report_id = Math.floor(10000000 + Math.random() * 90000000);\n      },\n    },\n    mounted() {\n      this.$watch('msg', (newMsg) => {\n        if (newMsg && newMsg.payload) {\n          this.updateSpecData(newMsg.payload);\n        }\n      });\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .form-container {\n    max-width: 600px;\n    margin: 0 auto;\n    padding: 20px;\n    background-color: #f4f4f9;\n    border-radius: 10px;\n    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n  }\n  \n  form {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n  }\n  \n  label {\n    font-weight: bold;\n  }\n  \n  input,\n  select,\n  button {\n    padding: 10px;\n    font-size: 1rem;\n    border-radius: 5px;\n    border: 1px solid #ccc;\n  }\n  \n  button {\n    background-color: #007bff;\n    color: white;\n    cursor: pointer;\n    border: none;\n  }\n  \n  button:hover {\n    background-color: #0056b3;\n  }\n  \n  h3 {\n    margin-top: 20px;\n  }\n  \n  .report-id-container {\n    display: flex;\n    gap: 10px;\n  }\n  </style>\n  ",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 580,
        "y": 200,
        "wires": [
            [
                "9c280c8461b4b98b"
            ]
        ]
    },
    {
        "id": "03f0d8cdc2f1b6d1",
        "type": "function",
        "z": "e6613618b3405f10",
        "name": "fetch global data",
        "func": "// In a Node-RED function node\nmsg.payload = {\n  latest_spec_id: global.get(\"latest_spec_id\") || 0,\n  spec: global.get(\"spec\") || [],\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 200,
        "wires": [
            [
                "2ee26788bce0c2dd"
            ]
        ]
    },
    {
        "id": "53fd82b76f9712fb",
        "type": "link in",
        "z": "e6613618b3405f10",
        "name": "link in 10",
        "links": [],
        "x": 65,
        "y": 160,
        "wires": [
            [
                "03f0d8cdc2f1b6d1"
            ]
        ]
    },
    {
        "id": "ea17e8f7b8f6af97",
        "type": "inject",
        "z": "e6613618b3405f10",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "e9f332661740ef76"
            ]
        ]
    },
    {
        "id": "e9f332661740ef76",
        "type": "fs-file-lister",
        "z": "e6613618b3405f10",
        "name": "DB",
        "start": "db",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": false,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 370,
        "y": 120,
        "wires": [
            [
                "17b9394803e27c56"
            ]
        ]
    },
    {
        "id": "17b9394803e27c56",
        "type": "function",
        "z": "e6613618b3405f10",
        "name": "setGlobalpath",
        "func": "global.set(\"db_path\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 120,
        "wires": [
            [
                "6e2658e72d337141"
            ]
        ]
    },
    {
        "id": "6e2658e72d337141",
        "type": "debug",
        "z": "e6613618b3405f10",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 120,
        "wires": []
    },
    {
        "id": "b41defef826bea8e",
        "type": "inject",
        "z": "e6613618b3405f10",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "03f0d8cdc2f1b6d1"
            ]
        ]
    },
    {
        "id": "7beadb4baf162041",
        "type": "debug",
        "z": "e6613618b3405f10",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 160,
        "wires": []
    },
    {
        "id": "9c280c8461b4b98b",
        "type": "switch",
        "z": "e6613618b3405f10",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "report_id",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "latest_spec_id",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 200,
        "wires": [
            [
                "7beadb4baf162041",
                "551c73509d8c3c10"
            ],
            [
                "d50bbc87398634fe"
            ]
        ]
    },
    {
        "id": "63d48c7ddf8b20ed",
        "type": "debug",
        "z": "e6613618b3405f10",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 240,
        "wires": []
    },
    {
        "id": "551c73509d8c3c10",
        "type": "link out",
        "z": "e6613618b3405f10",
        "name": "report_out",
        "mode": "link",
        "links": [
            "bec162c6d4155317"
        ],
        "x": 1105,
        "y": 80,
        "wires": []
    },
    {
        "id": "bec162c6d4155317",
        "type": "link in",
        "z": "e6613618b3405f10",
        "name": "insert_report_in",
        "links": [
            "551c73509d8c3c10"
        ],
        "x": 75,
        "y": 320,
        "wires": [
            [
                "788cd66141eccdce"
            ]
        ]
    },
    {
        "id": "788cd66141eccdce",
        "type": "function",
        "z": "e6613618b3405f10",
        "name": "insert Report",
        "func": "var data=msg.payload;\n\n// Construct the SQL query for inserting into the ReportSettings table\nvar topic = `\nINSERT INTO ReportSettings (\n    report_id, standard, ups_model, client_name, \n    brand_name, test_engineer_name, test_approval_name, \n    spec_id\n) VALUES (\n    '${data.report_id}', '${data.standard}', '${data.ups_model}', '${data.client_name}', \n    '${data.brand_name}', '${data.test_engineer_name}', '${data.test_approval_name}', \n    '${data.spec_id}'\n);\n`;\n\n// Return the query for execution\nreturn { topic: topic };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 320,
        "wires": [
            [
                "400174fe9f6a9b3c"
            ]
        ]
    },
    {
        "id": "b8decd7f7a02b7f4",
        "type": "function",
        "z": "e6613618b3405f10",
        "name": "get report settings  id",
        "func": "msg.topic=\"SELECT last_insert_rowid()\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 320,
        "wires": [
            [
                "c0902961a8cacb78"
            ]
        ]
    },
    {
        "id": "400174fe9f6a9b3c",
        "type": "sqlite",
        "z": "e6613618b3405f10",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 400,
        "y": 320,
        "wires": [
            [
                "b8decd7f7a02b7f4"
            ]
        ]
    },
    {
        "id": "c0902961a8cacb78",
        "type": "sqlite",
        "z": "e6613618b3405f10",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 820,
        "y": 320,
        "wires": [
            [
                "f8989db16189f054"
            ]
        ]
    },
    {
        "id": "f8989db16189f054",
        "type": "function",
        "z": "e6613618b3405f10",
        "name": "set global settings id",
        "func": "// Access the first element of the payload\nvar lastId = msg.payload[0][\"last_insert_rowid()\"];\n\n// Save it globally for later use\nglobal.set(\"latest_setting_id\", lastId);\n\n// Debugging\nnode.warn(\"Captured latest_setting_id: \" + lastId);\nmsg.payload=lastId;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 320,
        "wires": [
            [
                "f8242694d1fe6f5a",
                "45a085ba923b6c12"
            ]
        ]
    },
    {
        "id": "d50bbc87398634fe",
        "type": "rbe",
        "z": "e6613618b3405f10",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1030,
        "y": 220,
        "wires": [
            [
                "63d48c7ddf8b20ed"
            ]
        ]
    },
    {
        "id": "f8242694d1fe6f5a",
        "type": "ui-text",
        "z": "e6613618b3405f10",
        "group": "e646fb9cc2101751",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SETTING ID",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 1230,
        "y": 320,
        "wires": []
    },
    {
        "id": "1169497c4a1d7bd6",
        "type": "function",
        "z": "e6613618b3405f10",
        "name": "get_all_settings",
        "func": "msg.topic=\"SELECT * FROM ReportSettings ORDER BY id DESC LIMIT 100\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 380,
        "wires": [
            [
                "3d266bab08b42ef5"
            ]
        ]
    },
    {
        "id": "3d266bab08b42ef5",
        "type": "sqlite",
        "z": "e6613618b3405f10",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 420,
        "y": 380,
        "wires": [
            [
                "44fcdae9c4c87fd9"
            ]
        ]
    },
    {
        "id": "44fcdae9c4c87fd9",
        "type": "function",
        "z": "e6613618b3405f10",
        "name": "set global settings",
        "func": "global.set(\"settings\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 380,
        "wires": [
            [
                "30277c68a568763f"
            ]
        ]
    },
    {
        "id": "45a085ba923b6c12",
        "type": "link out",
        "z": "e6613618b3405f10",
        "name": "global_setting_id_out",
        "mode": "link",
        "links": [
            "9692563aa62ae277"
        ],
        "x": 1205,
        "y": 280,
        "wires": []
    },
    {
        "id": "9692563aa62ae277",
        "type": "link in",
        "z": "e6613618b3405f10",
        "name": "get_all_setting_in",
        "links": [
            "45a085ba923b6c12"
        ],
        "x": 75,
        "y": 380,
        "wires": [
            [
                "1169497c4a1d7bd6"
            ]
        ]
    },
    {
        "id": "30277c68a568763f",
        "type": "debug",
        "z": "e6613618b3405f10",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 380,
        "wires": []
    },
    {
        "id": "e1e058a6cc151e1e",
        "type": "inject",
        "z": "e6613618b3405f10",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "d49f8cf522c6f5bf"
            ]
        ]
    },
    {
        "id": "d49f8cf522c6f5bf",
        "type": "function",
        "z": "e6613618b3405f10",
        "name": "get_all_setting_id",
        "func": "msg.topic=\"SELECT * FROM ReportSettings ORDER BY id DESC LIMIT 100\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 480,
        "wires": [
            [
                "a24532e5f01bb659"
            ]
        ]
    },
    {
        "id": "a24532e5f01bb659",
        "type": "sqlite",
        "z": "e6613618b3405f10",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 540,
        "y": 480,
        "wires": [
            [
                "9d8ea0b2d320a605"
            ]
        ]
    },
    {
        "id": "9d8ea0b2d320a605",
        "type": "function",
        "z": "e6613618b3405f10",
        "name": "save all settings and latest  id",
        "func": "let saved_settings = msg.payload;\n\n// Validate that msg.payload is an array of objects with the required fields\nif (!Array.isArray(saved_settings) || !saved_settings.every(item => typeof item.id === \"number\")) {\n    node.error(\"Invalid input: msg.payload must be an array of objects with numeric 'id' fields\", msg);\n    return null;\n}\n\nlet latest_setting_id = global.get(\"latest_setting_id\") || 0;\nlet settings = global.get(\"settings\") || [];\n\nfunction delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function processSettings(settings_value, send, done) {\n    for (let setting of settings_value) {\n        // Add only settings with id greater than the latest_setting_id\n        if (setting.id > latest_setting_id) {\n            settings.push(setting);\n            latest_setting_id = setting.id; // Update the latest_setting_id\n            \n        }\n        \n        // Update global settings and send the payload\n    \n\n        await delay(100); // Simulate a delay if needed\n    }\n        global.set(\"latest_setting_id\", latest_setting_id);\n        global.set(\"settings\", settings);\n        send([{ payload: settings }]);\n\n    node.warn(`Updated settings: ${JSON.stringify(settings)}`);\n    done();\n}\n\nprocessSettings(saved_settings, node.send, () => node.done());\n\n// Return null as the function sends messages asynchronously\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 480,
        "wires": [
            [
                "d457ee3a31f8578a"
            ]
        ]
    },
    {
        "id": "d457ee3a31f8578a",
        "type": "debug",
        "z": "e6613618b3405f10",
        "name": "test_report_id",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 480,
        "wires": []
    },
    {
        "id": "fcaa87c16afbdfcd",
        "type": "protobuf-file",
        "protopath": "D:\\_0_DEV_SOFTWARE\\PIO_ESPIDF\\UPS_TESTER_PROJECT\\powerGuard\\src\\proto\\pData.proto",
        "watchFile": false,
        "keepCase": true
    },
    {
        "id": "785ed2fd62cefc23",
        "type": "ui-group",
        "name": "Report_Settings",
        "page": "cb5e987bd157d173",
        "width": 4,
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "0d4c44b815a8faab",
        "type": "sqlitedb",
        "db": "D:\\_0_DEV_SOFTWARE\\PIO_ESPIDF\\UPS_TESTER_PROJECT\\powerGuard\\db\\test_reports.db",
        "mode": "RWC"
    },
    {
        "id": "e646fb9cc2101751",
        "type": "ui-group",
        "name": "DB_UPDATES",
        "page": "cb5e987bd157d173",
        "width": 4,
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "cb5e987bd157d173",
        "type": "ui-page",
        "name": "SETTINGS",
        "ui": "6bb6879aa70631ea",
        "path": "/settings",
        "icon": "cog-outline",
        "layout": "grid",
        "theme": "f51f9a07212ff54b",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "6bb6879aa70631ea",
        "type": "ui-base",
        "name": "UPS Tester",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "showPageTitle": true,
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": "1",
        "showDisconnectNotification": true
    },
    {
        "id": "f51f9a07212ff54b",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#d1479f",
            "primary": "#0094ce",
            "bgPage": "#ededed",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    }
]