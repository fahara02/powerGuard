[
    {
        "id": "fa6da6e95a3482ec",
        "type": "tab",
        "label": "SPEC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ed89ecfdb91e7e5e",
        "type": "ui-template",
        "z": "fa6da6e95a3482ec",
        "group": "e98ad7098a2677db",
        "page": "",
        "ui": "",
        "name": "UPS_SPEC",
        "order": 1,
        "width": 3,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div class=\"form-container\">\n    <h2>UPS Specification Form</h2>\n    <form @submit.prevent=\"submitForm\">\n    <!-- Phase Selection -->\n<label for=\"phase\">Phase:</label>\n<select v-model=\"formData.phase\" id=\"phase\">\n  <option value=\"SINGLE_PHASE\">Single Phase</option>\n  <option value=\"THREE_PHASE\">Three Phase</option>\n</select>\n\n\n      <!-- Rated VA -->\n      <label for=\"rated_va\">Rated VA:</label>\n      <input type=\"number\" v-model=\"formData.rated_va\" id=\"rated_va\" />\n\n      <!-- Rated Voltage -->\n      <label for=\"rated_voltage\">Rated Voltage:</label>\n      <input type=\"number\" v-model=\"formData.rated_voltage\" id=\"rated_voltage\" />\n\n      <!-- Rated Current -->\n      <label for=\"rated_current\">Rated Current:</label>\n      <input type=\"number\" v-model=\"formData.rated_current\" id=\"rated_current\" />\n\n      <!-- Minimum Input Voltage -->\n      <label for=\"min_input_voltage\">Minimum Input Voltage:</label>\n      <input type=\"number\" v-model=\"formData.min_input_voltage\" id=\"min_input_voltage\" />\n\n      <!-- Maximum Input Voltage -->\n      <label for=\"max_input_voltage\">Maximum Input Voltage:</label>\n      <input type=\"number\" v-model=\"formData.max_input_voltage\" id=\"max_input_voltage\" />\n\n      <!-- PF Rated Current -->\n<label for=\"pf_rated_current\">Power Factor Rated Current (0-1):</label>\n<input \n  type=\"number\" \n  v-model=\"formData.pf_rated_current\" \n  id=\"pf_rated_current\" \n  step=\"0.01\" \n  min=\"0\" \n  max=\"1\" \n/>\n\n\n      <!-- Max Continuous Amp -->\n      <label for=\"max_continous_amp\">Max Continuous Amp:</label>\n      <input type=\"number\" v-model=\"formData.max_continous_amp\" id=\"max_continous_amp\" />\n\n      <!-- Overload Amp -->\n      <label for=\"overload_amp\">Overload Amp:</label>\n      <input type=\"number\" v-model=\"formData.overload_amp\" id=\"overload_amp\" />\n\n      <!-- Overload Long -->\n      <h3>Overload Long</h3>\n      <label for=\"long_load_percentage\">Load Percentage:</label>\n      <input type=\"number\" v-model=\"formData.overload_long.load_percentage\" id=\"long_load_percentage\" />\n\n      <label for=\"long_overload_time\">Overload Time (min):</label>\n      <input type=\"number\" v-model=\"formData.overload_long.overload_time_min\" id=\"long_overload_time\" />\n\n      <!-- Overload Medium -->\n      <h3>Overload Medium</h3>\n      <label for=\"medium_load_percentage\">Load Percentage:</label>\n      <input type=\"number\" v-model=\"formData.overload_medium.load_percentage\" id=\"medium_load_percentage\" />\n\n      <label for=\"medium_overload_time\">Overload Time (min):</label>\n      <input type=\"number\" v-model=\"formData.overload_medium.overload_time_min\" id=\"medium_overload_time\" />\n\n      <!-- Overload Short -->\n      <h3>Overload Short</h3>\n      <label for=\"short_load_percentage\">Load Percentage:</label>\n      <input type=\"number\" v-model=\"formData.overload_short.load_percentage\" id=\"short_load_percentage\" />\n\n      <label for=\"short_overload_time\">Overload Time (min):</label>\n      <input type=\"number\" v-model=\"formData.overload_short.overload_time_min\" id=\"short_overload_time\" />\n\n      <!-- Average Switch Time -->\n      <label for=\"avg_switch_time\">Average Switch Time (ms):</label>\n      <input type=\"number\" v-model=\"formData.avg_switch_time_ms\" id=\"avg_switch_time\" />\n\n      <!-- Average Backup Time -->\n      <label for=\"avg_backup_time\">Average Backup Time (ms):</label>\n      <input type=\"number\" v-model=\"formData.avg_backup_time_ms\" id=\"avg_backup_time\" />\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      formData: {\n        phase: \"SINGLE_PHASE\",\n        rated_va: 1000,\n        rated_voltage: 230,\n        rated_current: 10,\n        min_input_voltage: 180,\n        max_input_voltage: 260,\n        pf_rated_current: 0.9,\n        max_continous_amp: 15,\n        overload_amp: 20,\n        overload_long: {\n          load_percentage: 110,\n          overload_time_min: 30,\n        },\n        overload_medium: {\n          load_percentage: 125,\n          overload_time_min: 10,\n        },\n        overload_short: {\n          load_percentage: 150,\n          overload_time_min: 1,\n        },\n        avg_switch_time_ms: 5,\n        avg_backup_time_ms: 300000,\n      },\n    };\n  },\n  methods: {\n    submitForm() {\n      const msg = { payload: this.formData };\n      this.send(msg);\n\n    },\n  },\n};\n</script>\n\n\n<style scoped>\n  .form-container {\n    max-width: 900px;\n    margin: 0 auto;\n    padding: 20px;\n    background-color: #f4f4f9;\n    border-radius: 10px;\n    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n  }\n\n  form {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n  }\n\n  label {\n    font-weight: bold;\n  }\n\n  input, select, button {\n    padding: 10px;\n    font-size: 1rem;\n    border-radius: 5px;\n    border: 1px solid #ccc;\n  }\n\n  button {\n    background-color: #007bff;\n    color: white;\n    cursor: pointer;\n    border: none;\n  }\n\n  button:hover {\n    background-color: #0056b3;\n  }\n\n  h3 {\n    margin-bottom: 5px;\n  }\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 290,
        "y": 80,
        "wires": [
            [
                "b5751b1463e35f8e",
                "c9ea6530ad87d3ba"
            ]
        ]
    },
    {
        "id": "fea3c4582361255b",
        "type": "inject",
        "z": "fa6da6e95a3482ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "ed89ecfdb91e7e5e"
            ]
        ]
    },
    {
        "id": "af3608a7f0441bca",
        "type": "debug",
        "z": "fa6da6e95a3482ec",
        "name": "SPEC UPDATE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 360,
        "wires": []
    },
    {
        "id": "b5751b1463e35f8e",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "set Global Spec",
        "func": "global.set(\"new_spec\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 20,
        "wires": [
            [
                "7122ee90d62130a4"
            ]
        ]
    },
    {
        "id": "5fcac7502291a652",
        "type": "sqlite",
        "z": "fa6da6e95a3482ec",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 880,
        "y": 80,
        "wires": [
            [
                "f10108f26abf0478"
            ]
        ]
    },
    {
        "id": "7122ee90d62130a4",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "inser Overload long",
        "func": "var spec = global.get(\"new_spec\");\nvar load_p = spec.overload_long.load_percentage;\nvar ov_time = spec.overload_long.overload_time_min;\n\n// Construct the SQL query\nvar topic = `INSERT INTO OverLoad (load_percentage, overload_time_min) VALUES (${load_p}, ${ov_time});`;\n\n// Return the query to be executed by the SQLite node\nreturn { topic: topic };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 80,
        "wires": [
            [
                "5fcac7502291a652"
            ]
        ]
    },
    {
        "id": "c5939ac19b69bcfa",
        "type": "inject",
        "z": "fa6da6e95a3482ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "7122ee90d62130a4"
            ]
        ]
    },
    {
        "id": "f64d795d.fb6ae",
        "type": "catch",
        "z": "fa6da6e95a3482ec",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 80,
        "y": 540,
        "wires": [
            [
                "32c27692.03eeaa",
                "36ed3df.88509c2"
            ]
        ]
    },
    {
        "id": "32c27692.03eeaa",
        "type": "debug",
        "z": "fa6da6e95a3482ec",
        "name": "error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 290,
        "y": 600,
        "wires": []
    },
    {
        "id": "36ed3df.88509c2",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "sql errors",
        "func": "var payload=msg.error.message;\nmsg.payload = payload +\" timestamp \"+msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 540,
        "wires": [
            [
                "2eac70b89e0f075c"
            ]
        ]
    },
    {
        "id": "e33e7ff6.a8878",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "Clear errors",
        "func": "node.error(\"\",msg);//clear error\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "5a600e15.2c12a8",
        "type": "inject",
        "z": "fa6da6e95a3482ec",
        "name": "clear errors",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "e33e7ff6.a8878"
            ]
        ]
    },
    {
        "id": "2eac70b89e0f075c",
        "type": "ui-text",
        "z": "fa6da6e95a3482ec",
        "group": "e646fb9cc2101751",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "DB ERROR",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 550,
        "y": 520,
        "wires": []
    },
    {
        "id": "f10108f26abf0478",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "get Long id",
        "func": "msg.topic=\"SELECT last_insert_rowid()\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 80,
        "wires": [
            [
                "55c671781f9dd10b"
            ]
        ]
    },
    {
        "id": "55c671781f9dd10b",
        "type": "sqlite",
        "z": "fa6da6e95a3482ec",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 1240,
        "y": 80,
        "wires": [
            [
                "bab7893903817ce1"
            ]
        ]
    },
    {
        "id": "bab7893903817ce1",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "set global overload long id",
        "func": "// Access the first element of the payload\nvar lastId = msg.payload[0][\"last_insert_rowid()\"];\n\n// Save it globally for later use\nglobal.set(\"overload_long_id\", lastId);\n\n// Debugging\nnode.warn(\"Captured overload_long_id: \" + lastId);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 80,
        "wires": [
            [
                "dbb287655beae14c"
            ]
        ]
    },
    {
        "id": "4941e95b05b83ce1",
        "type": "delay",
        "z": "fa6da6e95a3482ec",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "ee727c3090e143e0"
            ]
        ]
    },
    {
        "id": "ee727c3090e143e0",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "inser Overload medium",
        "func": "var spec = global.get(\"new_spec\");\nvar load_p = spec.overload_medium.load_percentage;\nvar ov_time = spec.overload_medium.overload_time_min;\n\n// Construct the SQL query\nvar topic = `INSERT INTO OverLoad (load_percentage, overload_time_min) VALUES (${load_p}, ${ov_time});`;\n\n// Return the query to be executed by the SQLite node\nreturn { topic: topic };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "9fbbba592b4d3cdb"
            ]
        ]
    },
    {
        "id": "7ed41b589cdb55de",
        "type": "sqlite",
        "z": "fa6da6e95a3482ec",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 940,
        "y": 180,
        "wires": [
            [
                "1bc1947f99ad8b6e"
            ]
        ]
    },
    {
        "id": "1bc1947f99ad8b6e",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "set global overload mediumj id",
        "func": "// Access the first element of the payload\nvar lastId = msg.payload[0][\"last_insert_rowid()\"];\n\n// Save it globally for later use\nglobal.set(\"overload_medium_id\", lastId);\n\n// Debugging\nnode.warn(\"Captured overload_medium_id: \" + lastId);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 180,
        "wires": [
            [
                "5a449e77ef33a460"
            ]
        ]
    },
    {
        "id": "a1ad7bb94e343670",
        "type": "delay",
        "z": "fa6da6e95a3482ec",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 240,
        "wires": [
            [
                "9537219456780367"
            ]
        ]
    },
    {
        "id": "dbb287655beae14c",
        "type": "link out",
        "z": "fa6da6e95a3482ec",
        "name": "overload_long_id_set",
        "mode": "link",
        "links": [
            "781b2b6c1e50c880"
        ],
        "x": 1655,
        "y": 80,
        "wires": []
    },
    {
        "id": "781b2b6c1e50c880",
        "type": "link in",
        "z": "fa6da6e95a3482ec",
        "name": "overload_medium_in",
        "links": [
            "dbb287655beae14c"
        ],
        "x": 55,
        "y": 180,
        "wires": [
            [
                "4941e95b05b83ce1"
            ]
        ]
    },
    {
        "id": "5a449e77ef33a460",
        "type": "link out",
        "z": "fa6da6e95a3482ec",
        "name": "overload_medium_id_set",
        "mode": "link",
        "links": [
            "b5134714174fb262"
        ],
        "x": 1455,
        "y": 180,
        "wires": []
    },
    {
        "id": "b5134714174fb262",
        "type": "link in",
        "z": "fa6da6e95a3482ec",
        "name": "overload_short_in",
        "links": [
            "5a449e77ef33a460"
        ],
        "x": 55,
        "y": 240,
        "wires": [
            [
                "a1ad7bb94e343670"
            ]
        ]
    },
    {
        "id": "9537219456780367",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "inser Overload short",
        "func": "var spec = global.get(\"new_spec\");\nvar load_p = spec.overload_medium.load_percentage;\nvar ov_time = spec.overload_medium.overload_time_min;\n\n// Construct the SQL query\nvar topic = `INSERT INTO OverLoad (load_percentage, overload_time_min) VALUES (${load_p}, ${ov_time});`;\n\n// Return the query to be executed by the SQLite node\nreturn { topic: topic };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 240,
        "wires": [
            [
                "0afacc5f5408c92b"
            ]
        ]
    },
    {
        "id": "c803bdd59f1d6307",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "get medium id",
        "func": "msg.topic=\"SELECT last_insert_rowid()\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 180,
        "wires": [
            [
                "7ed41b589cdb55de"
            ]
        ]
    },
    {
        "id": "9fbbba592b4d3cdb",
        "type": "sqlite",
        "z": "fa6da6e95a3482ec",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 580,
        "y": 180,
        "wires": [
            [
                "c803bdd59f1d6307"
            ]
        ]
    },
    {
        "id": "0afacc5f5408c92b",
        "type": "sqlite",
        "z": "fa6da6e95a3482ec",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 580,
        "y": 240,
        "wires": [
            [
                "68bf81fdcd879589"
            ]
        ]
    },
    {
        "id": "68bf81fdcd879589",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "get short id",
        "func": "msg.topic=\"SELECT last_insert_rowid()\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 240,
        "wires": [
            [
                "68bd7b6373a6fb47"
            ]
        ]
    },
    {
        "id": "68bd7b6373a6fb47",
        "type": "sqlite",
        "z": "fa6da6e95a3482ec",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 940,
        "y": 240,
        "wires": [
            [
                "c9e666be9e8db58b"
            ]
        ]
    },
    {
        "id": "c9e666be9e8db58b",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "set global overload short id",
        "func": "// Access the first element of the payload\nvar lastId = msg.payload[0][\"last_insert_rowid()\"];\n\n// Save it globally for later use\nglobal.set(\"overload_short_id\", lastId);\n\n// Debugging\nnode.warn(\"Captured overload_short_id: \" + lastId);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 240,
        "wires": [
            [
                "316936fd8f043cdc"
            ]
        ]
    },
    {
        "id": "c90cf51249636fc0",
        "type": "delay",
        "z": "fa6da6e95a3482ec",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "b0a6e40e6de9b9f9"
            ]
        ]
    },
    {
        "id": "b0a6e40e6de9b9f9",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "spec",
        "func": "// Access the global variables for overload IDs\nvar overloadLongId = global.get(\"overload_long_id\");\nvar overloadMediumId = global.get(\"overload_medium_id\");\nvar overloadShortId = global.get(\"overload_short_id\");\n\n// Access the data from the incoming payload\nvar data = global.get(\"new_spec\");\n\n// Construct the SQL query for inserting into the spec table\nvar topic = `\nINSERT INTO spec (\n    phase, rating_va, rated_voltage, rated_current, \n    min_input_voltage, max_input_voltage, pf_rated_current, \n    max_continous_amp, overload_amp, overload_long_id, \n    overload_medium_id, overload_short_id, avg_switch_time_ms, \n    avg_backup_time_ms\n) VALUES (\n    '${data.phase}', ${data.rated_va}, ${data.rated_voltage}, ${data.rated_current}, \n    ${data.min_input_voltage}, ${data.max_input_voltage}, ${data.pf_rated_current}, \n    ${data.max_continous_amp}, ${data.overload_amp}, \n    ${overloadLongId}, ${overloadMediumId}, ${overloadShortId},\n    ${data.avg_switch_time_ms}, ${data.avg_backup_time_ms}\n);\n`;\n\n// Return the query for execution\nreturn { topic: topic };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 300,
        "wires": [
            [
                "c6ed1523341d51c1",
                "50ce707bed85d3c0"
            ]
        ]
    },
    {
        "id": "316936fd8f043cdc",
        "type": "link out",
        "z": "fa6da6e95a3482ec",
        "name": "overload_short_id_set",
        "mode": "link",
        "links": [
            "7a0dc356b1a5bf4d"
        ],
        "x": 1435,
        "y": 240,
        "wires": []
    },
    {
        "id": "7a0dc356b1a5bf4d",
        "type": "link in",
        "z": "fa6da6e95a3482ec",
        "name": "final_spec_in",
        "links": [
            "316936fd8f043cdc"
        ],
        "x": 55,
        "y": 300,
        "wires": [
            [
                "c90cf51249636fc0"
            ]
        ]
    },
    {
        "id": "c6ed1523341d51c1",
        "type": "sqlite",
        "z": "fa6da6e95a3482ec",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 580,
        "y": 300,
        "wires": [
            [
                "00c5609a01d7e96b"
            ]
        ]
    },
    {
        "id": "00c5609a01d7e96b",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "get spec id",
        "func": "msg.topic=\"SELECT last_insert_rowid()\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 300,
        "wires": [
            [
                "5661e8c29247bd17"
            ]
        ]
    },
    {
        "id": "5661e8c29247bd17",
        "type": "sqlite",
        "z": "fa6da6e95a3482ec",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 940,
        "y": 300,
        "wires": [
            [
                "ec9b60e20776030b"
            ]
        ]
    },
    {
        "id": "ec9b60e20776030b",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "set global spec id",
        "func": "// Access the first element of the payload\nvar lastId = msg.payload[0][\"last_insert_rowid()\"];\n\n// Save it globally for later use\nglobal.set(\"latest_spec_id\", lastId);\n\n// Debugging\nnode.warn(\"Captured latest_spec_id: \" + lastId);\nmsg.payload=lastId;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 300,
        "wires": [
            [
                "309a5ee517f1f9b5",
                "738c7b20e44dc65c"
            ]
        ]
    },
    {
        "id": "309a5ee517f1f9b5",
        "type": "ui-text",
        "z": "fa6da6e95a3482ec",
        "group": "e646fb9cc2101751",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SPEC ID",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 1480,
        "y": 360,
        "wires": []
    },
    {
        "id": "738c7b20e44dc65c",
        "type": "link out",
        "z": "fa6da6e95a3482ec",
        "name": "latest_spec_id_out",
        "mode": "link",
        "links": [
            "cd699073d00f603e"
        ],
        "x": 1465,
        "y": 300,
        "wires": []
    },
    {
        "id": "cd699073d00f603e",
        "type": "link in",
        "z": "fa6da6e95a3482ec",
        "name": "get_all_spec_in",
        "links": [
            "738c7b20e44dc65c"
        ],
        "x": 55,
        "y": 360,
        "wires": [
            [
                "def410b75fcfd683"
            ]
        ]
    },
    {
        "id": "def410b75fcfd683",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "get_all_spec",
        "func": "msg.topic=\"SELECT * FROM spec ORDER BY id DESC LIMIT 100\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 360,
        "wires": [
            [
                "95f8395436660ba7"
            ]
        ]
    },
    {
        "id": "95f8395436660ba7",
        "type": "sqlite",
        "z": "fa6da6e95a3482ec",
        "mydb": "0d4c44b815a8faab",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "MAIN_DB",
        "x": 440,
        "y": 360,
        "wires": [
            [
                "f0cfb132c6dc3bb9"
            ]
        ]
    },
    {
        "id": "f0cfb132c6dc3bb9",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "set global spec",
        "func": "global.set(\"spec\",msg.payload);\n node.warn(`Updated spec: ${JSON.stringify(msg.payload)}`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 360,
        "wires": [
            [
                "af3608a7f0441bca"
            ]
        ]
    },
    {
        "id": "50ce707bed85d3c0",
        "type": "debug",
        "z": "fa6da6e95a3482ec",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 140,
        "wires": []
    },
    {
        "id": "c9ea6530ad87d3ba",
        "type": "debug",
        "z": "fa6da6e95a3482ec",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 80,
        "wires": []
    },
    {
        "id": "eadbe8a9ef6d5ac7",
        "type": "inject",
        "z": "fa6da6e95a3482ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 420,
        "wires": [
            [
                "def410b75fcfd683"
            ]
        ]
    },
    {
        "id": "c79b3cd0290a8207",
        "type": "ui-event",
        "z": "fa6da6e95a3482ec",
        "ui": "6bb6879aa70631ea",
        "name": "",
        "x": 90,
        "y": 480,
        "wires": [
            [
                "0ca4ec304397e4ea"
            ]
        ]
    },
    {
        "id": "0ca4ec304397e4ea",
        "type": "function",
        "z": "fa6da6e95a3482ec",
        "name": "setting page visit",
        "func": "// Extract the page object from the payload\nlet page_visited = msg.payload.page;\n\n// Add debugging information\nif (!page_visited) {\n    node.warn(\"Page object not found in msg.payload: \" + JSON.stringify(msg.payload));\n    msg.payload = false;\n    return msg;\n}\n\n// Check if the path matches \"/settings\"\nif (page_visited.path === \"/settings\") {\n    msg.payload = true;\n} else {\n    msg.payload = false;\n}\n\n// Log the result for verification\nnode.warn(\"Page path: \" + page_visited.path + \", Payload set to: \" + msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 480,
        "wires": [
            [
                "3790c62fbfb13d16"
            ]
        ]
    },
    {
        "id": "3790c62fbfb13d16",
        "type": "switch",
        "z": "fa6da6e95a3482ec",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 480,
        "wires": [
            [
                "def410b75fcfd683"
            ],
            []
        ]
    },
    {
        "id": "e98ad7098a2677db",
        "type": "ui-group",
        "name": "SPEC",
        "page": "cb5e987bd157d173",
        "width": 3,
        "height": "3",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "0d4c44b815a8faab",
        "type": "sqlitedb",
        "db": "D:\\_0_DEV_SOFTWARE\\PIO_ESPIDF\\UPS_TESTER_PROJECT\\powerGuard\\db\\test_reports.db",
        "mode": "RWC"
    },
    {
        "id": "e646fb9cc2101751",
        "type": "ui-group",
        "name": "DB_UPDATES",
        "page": "cb5e987bd157d173",
        "width": 4,
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "6bb6879aa70631ea",
        "type": "ui-base",
        "name": "UPS Tester",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": "1",
        "showDisconnectNotification": true
    },
    {
        "id": "cb5e987bd157d173",
        "type": "ui-page",
        "name": "SETTINGS",
        "ui": "6bb6879aa70631ea",
        "path": "/settings",
        "icon": "cog-outline",
        "layout": "grid",
        "theme": "f51f9a07212ff54b",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "f51f9a07212ff54b",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#d1479f",
            "primary": "#0094ce",
            "bgPage": "#ededed",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    }
]